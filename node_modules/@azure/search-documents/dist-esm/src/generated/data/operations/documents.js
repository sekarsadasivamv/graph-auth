/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/documentsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Documents. */
export class Documents {
    /**
     * Create a Documents.
     * @param {SearchClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    count(options, callback) {
        return this.client.sendOperationRequest({
            options
        }, countOperationSpec, callback);
    }
    searchGet(options, callback) {
        return this.client.sendOperationRequest({
            options
        }, searchGetOperationSpec, callback);
    }
    searchPost(searchRequest, options, callback) {
        return this.client.sendOperationRequest({
            searchRequest,
            options
        }, searchPostOperationSpec, callback);
    }
    get(key, options, callback) {
        return this.client.sendOperationRequest({
            key,
            options
        }, getOperationSpec, callback);
    }
    suggestGet(searchText, suggesterName, options, callback) {
        return this.client.sendOperationRequest({
            searchText,
            suggesterName,
            options
        }, suggestGetOperationSpec, callback);
    }
    suggestPost(suggestRequest, options, callback) {
        return this.client.sendOperationRequest({
            suggestRequest,
            options
        }, suggestPostOperationSpec, callback);
    }
    index(batch, options, callback) {
        return this.client.sendOperationRequest({
            batch,
            options
        }, indexOperationSpec, callback);
    }
    autocompleteGet(searchText, suggesterName, options, callback) {
        return this.client.sendOperationRequest({
            searchText,
            suggesterName,
            options
        }, autocompleteGetOperationSpec, callback);
    }
    autocompletePost(autocompleteRequest, options, callback) {
        return this.client.sendOperationRequest({
            autocompleteRequest,
            options
        }, autocompletePostOperationSpec, callback);
    }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const countOperationSpec = {
    httpMethod: "GET",
    path: "docs/$count",
    urlParameters: [
        Parameters.endpoint,
        Parameters.indexName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Number"
                }
            }
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
const searchGetOperationSpec = {
    httpMethod: "GET",
    path: "docs",
    urlParameters: [
        Parameters.endpoint,
        Parameters.indexName
    ],
    queryParameters: [
        Parameters.searchText0,
        Parameters.apiVersion,
        Parameters.includeTotalResultCount,
        Parameters.facets,
        Parameters.filter0,
        Parameters.highlightFields,
        Parameters.highlightPostTag0,
        Parameters.highlightPreTag0,
        Parameters.minimumCoverage0,
        Parameters.orderBy0,
        Parameters.queryType,
        Parameters.scoringParameters,
        Parameters.scoringProfile,
        Parameters.searchFields0,
        Parameters.searchMode,
        Parameters.select0,
        Parameters.skip,
        Parameters.top0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SearchDocumentsResult
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
const searchPostOperationSpec = {
    httpMethod: "POST",
    path: "docs/search.post.search",
    urlParameters: [
        Parameters.endpoint,
        Parameters.indexName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    requestBody: {
        parameterPath: "searchRequest",
        mapper: Object.assign(Object.assign({}, Mappers.SearchRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SearchDocumentsResult
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
const getOperationSpec = {
    httpMethod: "GET",
    path: "docs('{key}')",
    urlParameters: [
        Parameters.endpoint,
        Parameters.indexName,
        Parameters.key
    ],
    queryParameters: [
        Parameters.selectedFields,
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Object"
                }
            }
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
const suggestGetOperationSpec = {
    httpMethod: "GET",
    path: "docs/search.suggest",
    urlParameters: [
        Parameters.endpoint,
        Parameters.indexName
    ],
    queryParameters: [
        Parameters.searchText1,
        Parameters.suggesterName,
        Parameters.apiVersion,
        Parameters.filter1,
        Parameters.useFuzzyMatching0,
        Parameters.highlightPostTag1,
        Parameters.highlightPreTag1,
        Parameters.minimumCoverage1,
        Parameters.orderBy1,
        Parameters.searchFields1,
        Parameters.select1,
        Parameters.top1
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SuggestDocumentsResult
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
const suggestPostOperationSpec = {
    httpMethod: "POST",
    path: "docs/search.post.suggest",
    urlParameters: [
        Parameters.endpoint,
        Parameters.indexName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    requestBody: {
        parameterPath: "suggestRequest",
        mapper: Object.assign(Object.assign({}, Mappers.SuggestRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SuggestDocumentsResult
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
const indexOperationSpec = {
    httpMethod: "POST",
    path: "docs/search.index",
    urlParameters: [
        Parameters.endpoint,
        Parameters.indexName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    requestBody: {
        parameterPath: "batch",
        mapper: Object.assign(Object.assign({}, Mappers.IndexBatch), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IndexDocumentsResult
        },
        207: {
            bodyMapper: Mappers.IndexDocumentsResult
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
const autocompleteGetOperationSpec = {
    httpMethod: "GET",
    path: "docs/search.autocomplete",
    urlParameters: [
        Parameters.endpoint,
        Parameters.indexName
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.searchText1,
        Parameters.suggesterName,
        Parameters.autocompleteMode,
        Parameters.filter2,
        Parameters.useFuzzyMatching1,
        Parameters.highlightPostTag2,
        Parameters.highlightPreTag2,
        Parameters.minimumCoverage2,
        Parameters.searchFields2,
        Parameters.top2
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AutocompleteResult
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
const autocompletePostOperationSpec = {
    httpMethod: "POST",
    path: "docs/search.post.autocomplete",
    urlParameters: [
        Parameters.endpoint,
        Parameters.indexName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    requestBody: {
        parameterPath: "autocompleteRequest",
        mapper: Object.assign(Object.assign({}, Mappers.AutocompleteRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.AutocompleteResult
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
//# sourceMappingURL=documents.js.map