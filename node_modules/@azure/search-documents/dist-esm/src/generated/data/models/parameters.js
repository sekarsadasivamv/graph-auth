/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as coreHttp from "@azure/core-http";
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        required: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const autocompleteMode = {
    parameterPath: [
        "options",
        "autocompleteOptions",
        "autocompleteMode"
    ],
    mapper: {
        serializedName: "autocompleteMode",
        type: {
            name: "Enum",
            allowedValues: [
                "oneTerm",
                "twoTerms",
                "oneTermWithContext"
            ]
        }
    }
};
export const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        required: true,
        serializedName: "endpoint",
        defaultValue: '',
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const facets = {
    parameterPath: [
        "options",
        "searchOptions",
        "facets"
    ],
    mapper: {
        serializedName: "facet",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: coreHttp.QueryCollectionFormat.Multi
};
export const filter0 = {
    parameterPath: [
        "options",
        "searchOptions",
        "filter"
    ],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const filter1 = {
    parameterPath: [
        "options",
        "suggestOptions",
        "filter"
    ],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const filter2 = {
    parameterPath: [
        "options",
        "autocompleteOptions",
        "filter"
    ],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const highlightFields = {
    parameterPath: [
        "options",
        "searchOptions",
        "highlightFields"
    ],
    mapper: {
        serializedName: "highlight",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const highlightPostTag0 = {
    parameterPath: [
        "options",
        "searchOptions",
        "highlightPostTag"
    ],
    mapper: {
        serializedName: "highlightPostTag",
        type: {
            name: "String"
        }
    }
};
export const highlightPostTag1 = {
    parameterPath: [
        "options",
        "suggestOptions",
        "highlightPostTag"
    ],
    mapper: {
        serializedName: "highlightPostTag",
        type: {
            name: "String"
        }
    }
};
export const highlightPostTag2 = {
    parameterPath: [
        "options",
        "autocompleteOptions",
        "highlightPostTag"
    ],
    mapper: {
        serializedName: "highlightPostTag",
        type: {
            name: "String"
        }
    }
};
export const highlightPreTag0 = {
    parameterPath: [
        "options",
        "searchOptions",
        "highlightPreTag"
    ],
    mapper: {
        serializedName: "highlightPreTag",
        type: {
            name: "String"
        }
    }
};
export const highlightPreTag1 = {
    parameterPath: [
        "options",
        "suggestOptions",
        "highlightPreTag"
    ],
    mapper: {
        serializedName: "highlightPreTag",
        type: {
            name: "String"
        }
    }
};
export const highlightPreTag2 = {
    parameterPath: [
        "options",
        "autocompleteOptions",
        "highlightPreTag"
    ],
    mapper: {
        serializedName: "highlightPreTag",
        type: {
            name: "String"
        }
    }
};
export const includeTotalResultCount = {
    parameterPath: [
        "options",
        "searchOptions",
        "includeTotalResultCount"
    ],
    mapper: {
        serializedName: "$count",
        type: {
            name: "Boolean"
        }
    }
};
export const indexName = {
    parameterPath: "indexName",
    mapper: {
        required: true,
        serializedName: "indexName",
        defaultValue: '',
        type: {
            name: "String"
        }
    }
};
export const key = {
    parameterPath: "key",
    mapper: {
        required: true,
        serializedName: "key",
        type: {
            name: "String"
        }
    }
};
export const minimumCoverage0 = {
    parameterPath: [
        "options",
        "searchOptions",
        "minimumCoverage"
    ],
    mapper: {
        serializedName: "minimumCoverage",
        type: {
            name: "Number"
        }
    }
};
export const minimumCoverage1 = {
    parameterPath: [
        "options",
        "suggestOptions",
        "minimumCoverage"
    ],
    mapper: {
        serializedName: "minimumCoverage",
        type: {
            name: "Number"
        }
    }
};
export const minimumCoverage2 = {
    parameterPath: [
        "options",
        "autocompleteOptions",
        "minimumCoverage"
    ],
    mapper: {
        serializedName: "minimumCoverage",
        type: {
            name: "Number"
        }
    }
};
export const orderBy0 = {
    parameterPath: [
        "options",
        "searchOptions",
        "orderBy"
    ],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const orderBy1 = {
    parameterPath: [
        "options",
        "suggestOptions",
        "orderBy"
    ],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const queryType = {
    parameterPath: [
        "options",
        "searchOptions",
        "queryType"
    ],
    mapper: {
        serializedName: "queryType",
        type: {
            name: "Enum",
            allowedValues: [
                "simple",
                "full"
            ]
        }
    }
};
export const scoringParameters = {
    parameterPath: [
        "options",
        "searchOptions",
        "scoringParameters"
    ],
    mapper: {
        serializedName: "scoringParameter",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: coreHttp.QueryCollectionFormat.Multi
};
export const scoringProfile = {
    parameterPath: [
        "options",
        "searchOptions",
        "scoringProfile"
    ],
    mapper: {
        serializedName: "scoringProfile",
        type: {
            name: "String"
        }
    }
};
export const searchFields0 = {
    parameterPath: [
        "options",
        "searchOptions",
        "searchFields"
    ],
    mapper: {
        serializedName: "searchFields",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const searchFields1 = {
    parameterPath: [
        "options",
        "suggestOptions",
        "searchFields"
    ],
    mapper: {
        serializedName: "searchFields",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const searchFields2 = {
    parameterPath: [
        "options",
        "autocompleteOptions",
        "searchFields"
    ],
    mapper: {
        serializedName: "searchFields",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const searchMode = {
    parameterPath: [
        "options",
        "searchOptions",
        "searchMode"
    ],
    mapper: {
        serializedName: "searchMode",
        type: {
            name: "Enum",
            allowedValues: [
                "any",
                "all"
            ]
        }
    }
};
export const searchText0 = {
    parameterPath: [
        "options",
        "searchText"
    ],
    mapper: {
        serializedName: "search",
        type: {
            name: "String"
        }
    }
};
export const searchText1 = {
    parameterPath: "searchText",
    mapper: {
        required: true,
        serializedName: "search",
        type: {
            name: "String"
        }
    }
};
export const select0 = {
    parameterPath: [
        "options",
        "searchOptions",
        "select"
    ],
    mapper: {
        serializedName: "$select",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const select1 = {
    parameterPath: [
        "options",
        "suggestOptions",
        "select"
    ],
    mapper: {
        serializedName: "$select",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const selectedFields = {
    parameterPath: [
        "options",
        "selectedFields"
    ],
    mapper: {
        serializedName: "$select",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const skip = {
    parameterPath: [
        "options",
        "searchOptions",
        "skip"
    ],
    mapper: {
        serializedName: "$skip",
        type: {
            name: "Number"
        }
    }
};
export const suggesterName = {
    parameterPath: "suggesterName",
    mapper: {
        required: true,
        serializedName: "suggesterName",
        type: {
            name: "String"
        }
    }
};
export const top0 = {
    parameterPath: [
        "options",
        "searchOptions",
        "top"
    ],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const top1 = {
    parameterPath: [
        "options",
        "suggestOptions",
        "top"
    ],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const top2 = {
    parameterPath: [
        "options",
        "autocompleteOptions",
        "top"
    ],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const useFuzzyMatching0 = {
    parameterPath: [
        "options",
        "suggestOptions",
        "useFuzzyMatching"
    ],
    mapper: {
        serializedName: "fuzzy",
        type: {
            name: "Boolean"
        }
    }
};
export const useFuzzyMatching1 = {
    parameterPath: [
        "options",
        "autocompleteOptions",
        "useFuzzyMatching"
    ],
    mapper: {
        serializedName: "fuzzy",
        type: {
            name: "Boolean"
        }
    }
};
//# sourceMappingURL=parameters.js.map