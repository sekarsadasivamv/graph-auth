{"version":3,"file":"azure-msal-angular.js","sources":["ng:/@azure/msal-angular/src/broadcast.service.ts","ng:/@azure/msal-angular/src/MSALError.ts","ng:/@azure/msal-angular/src/constants.ts","ng:/@azure/msal-angular/src/msal.service.ts","ng:/@azure/msal-angular/src/msal-guard.service.ts","ng:/@azure/msal-angular/src/msal.interceptor.ts","ng:/@azure/msal-angular/src/msal-angular.configuration.ts","ng:/@azure/msal-angular/src/msal.module.ts","ng:/@azure/msal-angular/azure-msal-angular.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, Subscription } from \"rxjs\";\r\nimport { filter, map } from \"rxjs/operators\";\r\n\r\nexport type MessageCallback = (payload: any) => void;\r\n\r\n@Injectable()\r\nexport class BroadcastService {\r\n    private _msalSubject : BehaviorSubject<any> ;\r\n    private msalItem$:  Observable<any>;\r\n\r\n    constructor() {\r\n     this._msalSubject = new BehaviorSubject<any>(1);\r\n     this.msalItem$  = this._msalSubject.asObservable();\r\n    }\r\n\r\n    broadcast(type: string, payload: any) {\r\n        this._msalSubject.next({type , payload});\r\n    }\r\n\r\n    getMSALSubject() {\r\n        return this._msalSubject;\r\n    }\r\n\r\n    getMSALItem() {\r\n        return this.msalItem$;\r\n    }\r\n\r\n    subscribe(type: string, callback: MessageCallback): Subscription {\r\n        return this.msalItem$\r\n            .pipe(\r\n                filter(message => message.type === type),\r\n                map(message => message.payload)\r\n            )\r\n            .subscribe(callback);\r\n    }\r\n\r\n}\r\n","export class MSALError {\r\n    private _error: string = \"\";\r\n    private _errorDesc: string = \"\";\r\n    private _scopes: string = \"\";\r\n\r\n\r\n    constructor(error: string , errorDesc?: string, scopes?: string) {\r\n        this._error = error;\r\n        if (errorDesc) {\r\n            this._errorDesc = errorDesc;\r\n        }\r\n        if (scopes) {\r\n            this._scopes = scopes;\r\n        }\r\n    }\r\n\r\n    get error(): string {\r\n        return this._error;\r\n    }\r\n\r\n    set error(value: string) {\r\n        this._error = value;\r\n    }\r\n\r\n    get errorDesc(): string {\r\n        return this._errorDesc;\r\n    }\r\n\r\n    set errorDesc(value: string) {\r\n        this._errorDesc = value;\r\n    }\r\n\r\n    get scopes(): string {\r\n        return this._scopes;\r\n    }\r\n\r\n    set scopes(value: string) {\r\n        this._scopes = value;\r\n    }\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\r\n\r\nexport const MSAL_CONFIG = new InjectionToken<string>(\"MSAL_CONFIG\");\r\nexport const MSAL_CONFIG_ANGULAR = new InjectionToken<string>(\"MSAL_CONFIG_ANGULAR\");\r\n","import { Inject, Injectable } from \"@angular/core\";\r\nimport {\r\n    UserAgentApplication,\r\n    Configuration,\r\n    AuthenticationParameters,\r\n    AuthResponse,\r\n    AuthError,\r\n    authResponseCallback,\r\n    errorReceivedCallback,\r\n    tokenReceivedCallback,\r\n    UrlUtils\r\n} from \"msal\";\r\nimport { Router } from \"@angular/router\";\r\nimport {BroadcastService} from \"./broadcast.service\";\r\nimport { MSALError } from \"./MSALError\";\r\nimport { MsalAngularConfiguration } from \"./msal-angular.configuration\";\r\nimport { MSAL_CONFIG, MSAL_CONFIG_ANGULAR } from \"./constants\";\r\n\r\nconst buildMsalConfig = (config: Configuration) : Configuration => {\r\n    return {\r\n        ...config,\r\n        framework: {\r\n            ...config.framework,\r\n            isAngular: true\r\n        }\r\n    };\r\n};\r\n\r\n@Injectable()\r\nexport class MsalService extends UserAgentApplication {\r\n\r\n    constructor(\r\n        @Inject(MSAL_CONFIG) private msalConfig: Configuration,\r\n        @Inject(MSAL_CONFIG_ANGULAR) private msalAngularConfig: MsalAngularConfiguration,\r\n        private router: Router,\r\n        private broadcastService: BroadcastService\r\n    ) {\r\n        super(buildMsalConfig(msalConfig));\r\n\r\n        window.addEventListener(\"msal:popUpHashChanged\", (e: CustomEvent) => {\r\n            this.getLogger().verbose(\"popUpHashChanged \");\r\n        });\r\n\r\n        window.addEventListener(\"msal:popUpClosed\", (e: CustomEvent) => {\r\n            var errorParts = e.detail.split(\"|\");\r\n            var msalError = new MSALError(errorParts[0], errorParts[1]);\r\n            if (this.getLoginInProgress()) {\r\n                broadcastService.broadcast(\"msal:loginFailure\", msalError);\r\n                this.setloginInProgress(false);\r\n            }\r\n            else if (this.getAcquireTokenInProgress()) {\r\n                broadcastService.broadcast(\"msal:acquireTokenFailure\", msalError);\r\n                this.setAcquireTokenInProgress(false);\r\n            }\r\n        });\r\n\r\n        this.router.events.subscribe(event => {\r\n            for (var i = 0; i < router.config.length; i++) {\r\n                if (!router.config[i].canActivate) {\r\n                    if (this.msalAngularConfig.unprotectedResources) {\r\n                        if (!this.isEmpty(router.config[i].path) && !this.isUnprotectedResource(router.config[i].path)) {\r\n                            this.msalAngularConfig.unprotectedResources.push(router.config[i].path);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private isUnprotectedResource(url: string): boolean {\r\n        const frameworkUnprotectedResources = this.msalConfig.framework && this.msalConfig.framework.unprotectedResources;\r\n        const configUnprotectedResources = this.msalAngularConfig.unprotectedResources || [];\r\n\r\n        const unprotectedResources = frameworkUnprotectedResources && frameworkUnprotectedResources.length ? frameworkUnprotectedResources : configUnprotectedResources;\r\n\r\n        return unprotectedResources.some(resource => url.indexOf(resource) > -1);\r\n    }\r\n\r\n    private isEmpty(str: string): boolean {\r\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\r\n    }\r\n\r\n    public loginPopup(request?: AuthenticationParameters): Promise<any> {\r\n        return super.loginPopup(request)\r\n            .then((authResponse: AuthResponse) => {\r\n                this.broadcastService.broadcast(\"msal:loginSuccess\", authResponse);\r\n                return authResponse;\r\n            })\r\n            .catch((error: AuthError) => {\r\n                this.broadcastService.broadcast(\"msal:loginFailure\", error);\r\n                this.getLogger().error(\"Error during login:\\n\" + error.errorMessage);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    public ssoSilent(request: AuthenticationParameters): Promise<AuthResponse> {\r\n        return super.ssoSilent(request)\r\n            .then((authResponse: AuthResponse) => {\r\n                this.broadcastService.broadcast(\"msal:ssoSuccess\", authResponse);\r\n                return authResponse;\r\n            })\r\n            .catch((error: AuthError) => {\r\n                this.broadcastService.broadcast(\"msal:ssoFailure\", error);\r\n                this.getLogger().error(\"Error during login:\\n\" + error.errorMessage);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    public acquireTokenSilent(request: AuthenticationParameters): Promise<AuthResponse> {\r\n        return super.acquireTokenSilent(request)\r\n            .then((authResponse: AuthResponse) => {\r\n                this.broadcastService.broadcast(\"msal:acquireTokenSuccess\", authResponse);\r\n                return authResponse;\r\n            })\r\n            .catch((error: AuthError) => {\r\n                this.broadcastService.broadcast(\"msal:acquireTokenFailure\", error);\r\n                this.getLogger().error(\"Error when acquiring token for scopes: \" + request.scopes + \" \" + error);\r\n                throw error;\r\n            });\r\n\r\n    }\r\n\r\n    public acquireTokenPopup(request: AuthenticationParameters): Promise<AuthResponse> {\r\n        return super.acquireTokenPopup(request)\r\n            .then((authResponse: AuthResponse) => {\r\n                this.broadcastService.broadcast(\"msal:acquireTokenSuccess\", authResponse);\r\n                return authResponse;\r\n            })\r\n            .catch((error: AuthError) => {\r\n                this.broadcastService.broadcast(\"msal:acquireTokenFailure\", error);\r\n                this.getLogger().error(\"Error when acquiring token for scopes : \" + request.scopes + \" \" +  error);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    handleRedirectCallback(tokenReceivedCallback: tokenReceivedCallback, errorReceivedCallback: errorReceivedCallback): void;\r\n    handleRedirectCallback(authCallback: authResponseCallback): void;\r\n    handleRedirectCallback(authOrTokenCallback: authResponseCallback | tokenReceivedCallback, errorReceivedCallback?: errorReceivedCallback): void {\r\n        super.handleRedirectCallback((authError: AuthError, authResponse: AuthResponse) => {\r\n            if (authError) {\r\n                if (!this.getAccount()) {\r\n                    this.broadcastService.broadcast(\"msal:loginFailure\", authError);\r\n\r\n                } else {\r\n                    this.broadcastService.broadcast(\"msal:acquireTokenFailure\", authError);\r\n                }\r\n\r\n                if (errorReceivedCallback) {\r\n                    errorReceivedCallback(authError, authResponse.accountState);\r\n                } else {\r\n                    (authOrTokenCallback as authResponseCallback)(authError, authResponse);\r\n                }\r\n\r\n            } else if (authResponse) {\r\n                if (authResponse.tokenType === \"id_token\") {\r\n                    this.broadcastService.broadcast(\"msal:loginSuccess\", authResponse);\r\n                } else {\r\n                    this.broadcastService.broadcast(\"msal:acquireTokenSuccess\", authResponse);\r\n                }\r\n\r\n                if (errorReceivedCallback) {\r\n                    (authOrTokenCallback as tokenReceivedCallback)(authResponse);\r\n                } else {\r\n                    (authOrTokenCallback as authResponseCallback)(null, authResponse);\r\n                }\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public clearCacheForScope(accessToken: string) {\r\n        return super.clearCacheForScope(accessToken);\r\n    }\r\n\r\n    public getScopesForEndpoint(endpoint: string) : Array<string> {\r\n        if (this.msalConfig.framework && this.msalConfig.framework.unprotectedResources) {\r\n            this.getLogger().info(\"msalConfig.framework.unprotectedResources is deprecated, use msalAngularConfig.unprotectedResources\");\r\n        }\r\n\r\n        // if user specified list of unprotectedResources, no need to send token to these endpoints, return null.\r\n        const isUnprotected = this.isUnprotectedResource(endpoint);\r\n        if (isUnprotected) {\r\n            return null;\r\n        }\r\n\r\n        const frameworkProtectedResourceMap = this.msalConfig.framework && this.msalConfig.framework.protectedResourceMap;\r\n        if (frameworkProtectedResourceMap) {\r\n            this.getLogger().info(\"msalConfig.framework.protectedResourceMap is deprecated, use msalAngularConfig.protectedResourceMap\");\r\n        }\r\n\r\n        const protectedResourceMap = frameworkProtectedResourceMap && frameworkProtectedResourceMap.size ? frameworkProtectedResourceMap : new Map(this.msalAngularConfig.protectedResourceMap);\r\n\r\n        // process all protected resources and send the matched one\r\n        const keyForEndpoint = Array.from(protectedResourceMap.keys()).find(key => endpoint.indexOf(key) > -1);\r\n        if (keyForEndpoint) {\r\n            return protectedResourceMap.get(keyForEndpoint);\r\n        }\r\n\r\n        /*\r\n         * default resource will be clientid if nothing specified\r\n         * App will use idtoken for calls to itself\r\n         * check if it's staring from http or https, needs to match with app host\r\n         */\r\n        if (endpoint.indexOf(\"http://\") > -1 || endpoint.indexOf(\"https://\") > -1) {\r\n            if (UrlUtils.getHostFromUri(endpoint) === UrlUtils.getHostFromUri(super.getRedirectUri())) {\r\n                return new Array<string>(this.msalConfig.auth.clientId);\r\n            }\r\n        } else {\r\n            /*\r\n             * in angular level, the url for $http interceptor call could be relative url,\r\n             * if it's relative call, we'll treat it as app backend call.\r\n             */\r\n            return new Array<string>(this.msalConfig.auth.clientId);\r\n        }\r\n\r\n        // if not the app's own backend or not a domain listed in the endpoints structure\r\n        return null;\r\n    }\r\n}\r\n\r\n","import { Inject, Injectable } from \"@angular/core\";\r\nimport {\r\n    ActivatedRoute,\r\n    ActivatedRouteSnapshot, CanActivate, Router,\r\n    RouterStateSnapshot,\r\n} from \"@angular/router\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { Location, PlatformLocation } from \"@angular/common\";\r\nimport { BroadcastService } from \"./broadcast.service\";\r\nimport { Configuration, AuthError, InteractionRequiredAuthError, UrlUtils, WindowUtils } from \"msal\";\r\nimport { MsalAngularConfiguration } from \"./msal-angular.configuration\";\r\nimport { MSAL_CONFIG, MSAL_CONFIG_ANGULAR } from \"./constants\";\r\n\r\n@Injectable()\r\nexport class MsalGuard implements CanActivate {\r\n\r\n    constructor(\r\n        @Inject(MSAL_CONFIG) private msalConfig: Configuration,\r\n        @Inject(MSAL_CONFIG_ANGULAR) private msalAngularConfig: MsalAngularConfiguration,\r\n        private authService: MsalService,\r\n        private router: Router,\r\n        private activatedRoute: ActivatedRoute,\r\n        private location: Location,\r\n        private platformLocation: PlatformLocation,\r\n        private broadcastService: BroadcastService\r\n    ) {}\r\n\r\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\r\n    getDestinationUrl(path: string): string {\r\n        // Absolute base url for the application (default to origin if base element not present)\r\n        const baseElements = document.getElementsByTagName(\"base\");\r\n        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\r\n\r\n        // Path of page (including hash, if using hash routing)\r\n        const pathUrl = this.location.prepareExternalUrl(path);\r\n\r\n        // Hash location strategy\r\n        if (pathUrl.startsWith(\"#\")) {\r\n            return `${baseUrl}/${pathUrl}`;\r\n        }\r\n\r\n        // If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n        // Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n        return `${baseUrl}${path}`;\r\n    }\r\n\r\n    /**\r\n     * Interactively prompt the user to login\r\n     * @param url Path of the requested page\r\n     */\r\n    async loginInteractively(url: string) {\r\n        if (this.msalAngularConfig.popUp) {\r\n            return this.authService.loginPopup({\r\n                scopes: this.msalAngularConfig.consentScopes,\r\n                extraQueryParameters: this.msalAngularConfig.extraQueryParameters\r\n            })\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n\r\n        const redirectStartPage = this.getDestinationUrl(url);\r\n\r\n        this.authService.loginRedirect({\r\n            redirectStartPage,\r\n            scopes: this.msalAngularConfig.consentScopes,\r\n            extraQueryParameters: this.msalAngularConfig.extraQueryParameters\r\n        });\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Promise<boolean> {\r\n        this.authService.getLogger().verbose(\"location change event from old url to new url\");\r\n\r\n        // If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n        // short-circuit to prevent redirecting or popups.\r\n        if (UrlUtils.urlContainsHash(window.location.hash) && WindowUtils.isInIframe()) {\r\n            this.authService.getLogger().warning(\"redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\r\n            return false;\r\n        }\r\n\r\n        if (!this.authService.getAccount()) {\r\n            return this.loginInteractively(state.url);\r\n        }\r\n\r\n        return this.authService.acquireTokenSilent({\r\n            scopes: [this.msalConfig.auth.clientId]\r\n        })\r\n            .then(() => true)\r\n            .catch((error: AuthError) => {\r\n                if (InteractionRequiredAuthError.isInteractionRequiredError(error.errorCode)) {\r\n                    this.authService.getLogger().info(`Interaction required error in MSAL Guard, prompting for interaction.`);\r\n                    return this.loginInteractively(state.url);\r\n                }\r\n\r\n                this.authService.getLogger().error(`Non-interaction error in MSAL Guard: ${error.errorMessage}`);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpEvent,\r\n    HttpInterceptor,\r\n    HttpErrorResponse\r\n} from \"@angular/common/http\";\r\n\r\nimport { Observable, from } from \"rxjs\";\r\nimport { mergeMap, tap } from \"rxjs/operators\";\r\n\r\nimport {MsalService} from \"./msal.service\";\r\nimport { BroadcastService } from \"./broadcast.service\";\r\nimport { AuthResponse, ServerHashParamKeys } from \"msal\";\r\n\r\n@Injectable()\r\nexport class MsalInterceptor implements HttpInterceptor {\r\n    constructor(private auth: MsalService ,  private broadcastService: BroadcastService) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const scopes = this.auth.getScopesForEndpoint(req.url);\r\n        this.auth.getLogger().verbose(\"Url: \" + req.url + \" maps to scopes: \" + scopes);\r\n\r\n        // If there are no scopes set for this request, do nothing.\r\n        if (!scopes) {\r\n            return next.handle(req);\r\n        }\r\n\r\n        let token: string;\r\n\r\n        // Acquire a token for this request, and attach as proper auth header.\r\n        return from(\r\n            this.auth.acquireTokenSilent({ scopes })\r\n                .then((response: AuthResponse) => {\r\n                    token = response.tokenType === ServerHashParamKeys.ID_TOKEN ? response.idToken.rawIdToken : response.accessToken;\r\n                    const authHeader = `Bearer ${token}`;\r\n                    return req.clone({\r\n                        setHeaders: {\r\n                            Authorization: authHeader,\r\n                        }\r\n                    });\r\n                })\r\n        )\r\n        .pipe(\r\n            mergeMap(nextReq => next.handle(nextReq)),\r\n            tap(\r\n                event => {}, // tslint:disable-line\r\n                err => {\r\n                    if (err instanceof HttpErrorResponse && err.status === 401) {\r\n                        this.auth.clearCacheForScope(token);\r\n                        this.broadcastService.broadcast(\"msal:notAuthorized\", err.message);\r\n                    }\r\n                }\r\n            )\r\n        );\r\n    }\r\n}\r\n","export type MsalAngularConfiguration = {\r\n    consentScopes?: Array<string>;\r\n    popUp?: boolean;\r\n    extraQueryParameters?: {[key: string]: string};\r\n    unprotectedResources?: string[];\r\n    protectedResourceMap?: [string, string[]][] | Map<string, Array<string>>\r\n};\r\n\r\nexport const defaultMsalAngularConfiguration : MsalAngularConfiguration = {\r\n    consentScopes: [],\r\n    popUp: false,\r\n    extraQueryParameters: {},\r\n    unprotectedResources: [],\r\n    protectedResourceMap: []\r\n};\r\n","import { Injectable, ModuleWithProviders, NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { MsalGuard } from \"./msal-guard.service\";\r\nimport { BroadcastService } from \"./broadcast.service\";\r\nimport { Configuration } from \"msal\";\r\nimport { MsalAngularConfiguration, defaultMsalAngularConfiguration } from \"./msal-angular.configuration\";\r\nimport { MSAL_CONFIG, MSAL_CONFIG_ANGULAR } from \"./constants\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n    declarations: [\r\n\r\n    ],\r\n  providers: [MsalGuard, BroadcastService],\r\n})\r\nexport class MsalModule {\r\n   static forRoot(\r\n       config: Configuration,\r\n       angularConfig: MsalAngularConfiguration = defaultMsalAngularConfiguration\r\n    ): ModuleWithProviders {\r\n    return {\r\n      ngModule: MsalModule,\r\n      providers: [\r\n        {\r\n            provide: MSAL_CONFIG,\r\n            useValue: config\r\n        },\r\n        {\r\n            provide: MSAL_CONFIG_ANGULAR,\r\n            useValue: angularConfig\r\n        },\r\n        MsalService\r\n      ]\r\n    };\r\n  }\r\n\r\n}\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {defaultMsalAngularConfiguration as Éµa} from './src/msal-angular.configuration';"]}