import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { filter, map } from 'rxjs/operators';
let BroadcastService = class BroadcastService {
    constructor() {
        this._msalSubject = new BehaviorSubject(1);
        this.msalItem$ = this._msalSubject.asObservable();
    }
    broadcast(type, payload) {
        this._msalSubject.next({ type, payload });
    }
    getMSALSubject() {
        return this._msalSubject;
    }
    getMSALItem() {
        return this.msalItem$;
    }
    subscribe(type, callback) {
        return this.msalItem$
            .pipe(filter(message => message.type === type), map(message => message.payload))
            .subscribe(callback);
    }
};
BroadcastService = __decorate([
    Injectable()
], BroadcastService);
export { BroadcastService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvYWRjYXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYXp1cmUvbXNhbC1hbmd1bGFyLyIsInNvdXJjZXMiOlsic3JjL2Jyb2FkY2FzdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQTRCLE1BQU0sTUFBTSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFLN0MsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUFJekI7UUFFQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksZUFBZSxDQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxTQUFTLEdBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwRCxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQVksRUFBRSxPQUFZO1FBQ2hDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFHLE9BQU8sRUFBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELGNBQWM7UUFFVixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztJQUVELFdBQVc7UUFFUCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFZLEVBQUUsUUFBeUI7UUFDN0MsT0FBTyxJQUFJLENBQUMsU0FBUzthQUNoQixJQUFJLENBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsRUFDeEMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUNsQzthQUNBLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBRUosQ0FBQTtBQWpDWSxnQkFBZ0I7SUFENUIsVUFBVSxFQUFFO0dBQ0EsZ0JBQWdCLENBaUM1QjtTQWpDWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuZXhwb3J0IHR5cGUgTWVzc2FnZUNhbGxiYWNrID0gKHBheWxvYWQ6IGFueSkgPT4gdm9pZDtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJyb2FkY2FzdFNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBfbXNhbFN1YmplY3QgOiBCZWhhdmlvclN1YmplY3Q8YW55PiA7XHJcbiAgICBwcml2YXRlIG1zYWxJdGVtJDogIE9ic2VydmFibGU8YW55PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpXHJcbiAgICB7XHJcbiAgICAgdGhpcy5fbXNhbFN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueT4oMSk7XHJcbiAgICAgdGhpcy5tc2FsSXRlbSQgID0gdGhpcy5fbXNhbFN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYnJvYWRjYXN0KHR5cGU6IHN0cmluZyAscGF5bG9hZDogYW55KSB7XHJcbiAgICAgICAgdGhpcy5fbXNhbFN1YmplY3QubmV4dCh7dHlwZSAsIHBheWxvYWR9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRNU0FMU3ViamVjdCgpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21zYWxTdWJqZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1TQUxJdGVtKClcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tc2FsSXRlbSQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3Vic2NyaWJlKHR5cGU6IHN0cmluZywgY2FsbGJhY2s6IE1lc3NhZ2VDYWxsYmFjayk6IFN1YnNjcmlwdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXNhbEl0ZW0kXHJcbiAgICAgICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICAgICAgZmlsdGVyKG1lc3NhZ2UgPT4gbWVzc2FnZS50eXBlID09PSB0eXBlKSxcclxuICAgICAgICAgICAgICAgIG1hcChtZXNzYWdlID0+IG1lc3NhZ2UucGF5bG9hZClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19