import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { from } from 'rxjs';
import { mergeMap, tap } from 'rxjs/operators';
import { MsalService } from "./msal.service";
import { BroadcastService } from "./broadcast.service";
let MsalInterceptor = class MsalInterceptor {
    constructor(auth, broadcastService) {
        this.auth = auth;
        this.broadcastService = broadcastService;
    }
    intercept(req, next) {
        const scopes = this.auth.getScopesForEndpoint(req.url);
        this.auth.getLogger().verbose('Url: ' + req.url + ' maps to scopes: ' + scopes);
        // If there are no scopes set for this request, do nothing.
        if (!scopes) {
            return next.handle(req);
        }
        let accessToken;
        // Acquire a token for this request, and attach as proper auth header.
        return from(this.auth.acquireTokenSilent({ scopes })
            .then((response) => {
            accessToken = response.accessToken;
            const authHeader = `Bearer ${response.accessToken}`;
            return req.clone({
                setHeaders: {
                    Authorization: authHeader,
                }
            });
        }))
            .pipe(mergeMap(nextReq => next.handle(nextReq)), tap(event => { }, err => {
            if (err instanceof HttpErrorResponse && err.status === 401) {
                this.auth.clearCacheForScope(accessToken);
                this.broadcastService.broadcast('msal:notAuthorized', err.message);
            }
        }));
    }
};
MsalInterceptor.ctorParameters = () => [
    { type: MsalService },
    { type: BroadcastService }
];
MsalInterceptor = __decorate([
    Injectable()
], MsalInterceptor);
export { MsalInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXNhbC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhenVyZS9tc2FsLWFuZ3VsYXIvIiwic291cmNlcyI6WyJzcmMvbXNhbC5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBS0gsaUJBQWlCLEVBQ3BCLE1BQU0sc0JBQXNCLENBQUM7QUFFOUIsT0FBTyxFQUFjLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRS9DLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUl2RCxJQUFhLGVBQWUsR0FBNUIsTUFBYSxlQUFlO0lBQ3hCLFlBQW9CLElBQWlCLEVBQVksZ0JBQWtDO1FBQS9ELFNBQUksR0FBSixJQUFJLENBQWE7UUFBWSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQUcsQ0FBQztJQUV2RixTQUFTLENBQUMsR0FBcUIsRUFBRSxJQUFpQjtRQUM5QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxtQkFBbUIsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUVoRiwyREFBMkQ7UUFDM0QsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNULE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMzQjtRQUVELElBQUksV0FBbUIsQ0FBQztRQUV4QixzRUFBc0U7UUFDdEUsT0FBTyxJQUFJLENBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDO2FBQ25DLElBQUksQ0FBQyxDQUFDLFFBQXNCLEVBQUUsRUFBRTtZQUM3QixXQUFXLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQztZQUNuQyxNQUFNLFVBQVUsR0FBRyxVQUFVLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNwRCxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUM7Z0JBQ2IsVUFBVSxFQUFFO29CQUNSLGFBQWEsRUFBRSxVQUFVO2lCQUM1QjthQUNKLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUNUO2FBQ0EsSUFBSSxDQUNELFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsRUFDekMsR0FBRyxDQUNDLEtBQUssQ0FBQyxFQUFFLEdBQUUsQ0FBQyxFQUNYLEdBQUcsQ0FBQyxFQUFFO1lBQ0YsSUFBSSxHQUFHLFlBQVksaUJBQWlCLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7Z0JBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3RFO1FBQ0wsQ0FBQyxDQUNKLENBQ0osQ0FBQztJQUNOLENBQUM7Q0FDSixDQUFBOztZQXZDNkIsV0FBVztZQUE4QixnQkFBZ0I7O0FBRDFFLGVBQWU7SUFEM0IsVUFBVSxFQUFFO0dBQ0EsZUFBZSxDQXdDM0I7U0F4Q1ksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICAgIEh0dHBSZXF1ZXN0LFxyXG4gICAgSHR0cEhhbmRsZXIsXHJcbiAgICBIdHRwRXZlbnQsXHJcbiAgICBIdHRwSW50ZXJjZXB0b3IsXHJcbiAgICBIdHRwRXJyb3JSZXNwb25zZVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuXHJcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb20gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWVyZ2VNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7TXNhbFNlcnZpY2V9IGZyb20gXCIuL21zYWwuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBCcm9hZGNhc3RTZXJ2aWNlIH0gZnJvbSBcIi4vYnJvYWRjYXN0LnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgQXV0aFJlc3BvbnNlIH0gZnJvbSAnbXNhbCc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBNc2FsSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhdXRoOiBNc2FsU2VydmljZSAsICBwcml2YXRlIGJyb2FkY2FzdFNlcnZpY2U6IEJyb2FkY2FzdFNlcnZpY2UpIHt9XHJcblxyXG4gICAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gdGhpcy5hdXRoLmdldFNjb3Blc0ZvckVuZHBvaW50KHJlcS51cmwpO1xyXG4gICAgICAgIHRoaXMuYXV0aC5nZXRMb2dnZXIoKS52ZXJib3NlKCdVcmw6ICcgKyByZXEudXJsICsgJyBtYXBzIHRvIHNjb3BlczogJyArIHNjb3Blcyk7XHJcblxyXG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBzY29wZXMgc2V0IGZvciB0aGlzIHJlcXVlc3QsIGRvIG5vdGhpbmcuXHJcbiAgICAgICAgaWYgKCFzY29wZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYWNjZXNzVG9rZW46IHN0cmluZztcclxuXHJcbiAgICAgICAgLy8gQWNxdWlyZSBhIHRva2VuIGZvciB0aGlzIHJlcXVlc3QsIGFuZCBhdHRhY2ggYXMgcHJvcGVyIGF1dGggaGVhZGVyLlxyXG4gICAgICAgIHJldHVybiBmcm9tKFxyXG4gICAgICAgICAgICB0aGlzLmF1dGguYWNxdWlyZVRva2VuU2lsZW50KHsgc2NvcGVzIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2U6IEF1dGhSZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuID0gcmVzcG9uc2UuYWNjZXNzVG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXV0aEhlYWRlciA9IGBCZWFyZXIgJHtyZXNwb25zZS5hY2Nlc3NUb2tlbn1gO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXEuY2xvbmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRIZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBhdXRoSGVhZGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIClcclxuICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgbWVyZ2VNYXAobmV4dFJlcSA9PiBuZXh0LmhhbmRsZShuZXh0UmVxKSksXHJcbiAgICAgICAgICAgIHRhcChcclxuICAgICAgICAgICAgICAgIGV2ZW50ID0+IHt9LFxyXG4gICAgICAgICAgICAgICAgZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2UgJiYgZXJyLnN0YXR1cyA9PT0gNDAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aC5jbGVhckNhY2hlRm9yU2NvcGUoYWNjZXNzVG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJyb2FkY2FzdFNlcnZpY2UuYnJvYWRjYXN0KCdtc2FsOm5vdEF1dGhvcml6ZWQnLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iXX0=