import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { from } from 'rxjs';
import { mergeMap, tap } from 'rxjs/operators';
import { MsalService } from "./msal.service";
import { BroadcastService } from "./broadcast.service";
var MsalInterceptor = /** @class */ (function () {
    function MsalInterceptor(auth, broadcastService) {
        this.auth = auth;
        this.broadcastService = broadcastService;
    }
    MsalInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        var scopes = this.auth.getScopesForEndpoint(req.url);
        this.auth.getLogger().verbose('Url: ' + req.url + ' maps to scopes: ' + scopes);
        // If there are no scopes set for this request, do nothing.
        if (!scopes) {
            return next.handle(req);
        }
        var accessToken;
        // Acquire a token for this request, and attach as proper auth header.
        return from(this.auth.acquireTokenSilent({ scopes: scopes })
            .then(function (response) {
            accessToken = response.accessToken;
            var authHeader = "Bearer " + response.accessToken;
            return req.clone({
                setHeaders: {
                    Authorization: authHeader,
                }
            });
        }))
            .pipe(mergeMap(function (nextReq) { return next.handle(nextReq); }), tap(function (event) { }, function (err) {
            if (err instanceof HttpErrorResponse && err.status === 401) {
                _this.auth.clearCacheForScope(accessToken);
                _this.broadcastService.broadcast('msal:notAuthorized', err.message);
            }
        }));
    };
    MsalInterceptor.ctorParameters = function () { return [
        { type: MsalService },
        { type: BroadcastService }
    ]; };
    MsalInterceptor = __decorate([
        Injectable()
    ], MsalInterceptor);
    return MsalInterceptor;
}());
export { MsalInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXNhbC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhenVyZS9tc2FsLWFuZ3VsYXIvIiwic291cmNlcyI6WyJzcmMvbXNhbC5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBS0gsaUJBQWlCLEVBQ3BCLE1BQU0sc0JBQXNCLENBQUM7QUFFOUIsT0FBTyxFQUFjLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRS9DLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUl2RDtJQUNJLHlCQUFvQixJQUFpQixFQUFZLGdCQUFrQztRQUEvRCxTQUFJLEdBQUosSUFBSSxDQUFhO1FBQVkscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtJQUFHLENBQUM7SUFFdkYsbUNBQVMsR0FBVCxVQUFVLEdBQXFCLEVBQUUsSUFBaUI7UUFBbEQsaUJBb0NDO1FBbkNHLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBRWhGLDJEQUEyRDtRQUMzRCxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzNCO1FBRUQsSUFBSSxXQUFtQixDQUFDO1FBRXhCLHNFQUFzRTtRQUN0RSxPQUFPLElBQUksQ0FDUCxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQzthQUNuQyxJQUFJLENBQUMsVUFBQyxRQUFzQjtZQUN6QixXQUFXLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQztZQUNuQyxJQUFNLFVBQVUsR0FBRyxZQUFVLFFBQVEsQ0FBQyxXQUFhLENBQUM7WUFDcEQsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDO2dCQUNiLFVBQVUsRUFBRTtvQkFDUixhQUFhLEVBQUUsVUFBVTtpQkFDNUI7YUFDSixDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FDVDthQUNBLElBQUksQ0FDRCxRQUFRLENBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFwQixDQUFvQixDQUFDLEVBQ3pDLEdBQUcsQ0FDQyxVQUFBLEtBQUssSUFBSyxDQUFDLEVBQ1gsVUFBQSxHQUFHO1lBQ0MsSUFBSSxHQUFHLFlBQVksaUJBQWlCLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7Z0JBQ3hELEtBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzFDLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3RFO1FBQ0wsQ0FBQyxDQUNKLENBQ0osQ0FBQztJQUNOLENBQUM7O2dCQXRDeUIsV0FBVztnQkFBOEIsZ0JBQWdCOztJQUQxRSxlQUFlO1FBRDNCLFVBQVUsRUFBRTtPQUNBLGVBQWUsQ0F3QzNCO0lBQUQsc0JBQUM7Q0FBQSxBQXhDRCxJQXdDQztTQXhDWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gICAgSHR0cFJlcXVlc3QsXHJcbiAgICBIdHRwSGFuZGxlcixcclxuICAgIEh0dHBFdmVudCxcclxuICAgIEh0dHBJbnRlcmNlcHRvcixcclxuICAgIEh0dHBFcnJvclJlc3BvbnNlXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5cclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtZXJnZU1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHtNc2FsU2VydmljZX0gZnJvbSBcIi4vbXNhbC5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IEJyb2FkY2FzdFNlcnZpY2UgfSBmcm9tIFwiLi9icm9hZGNhc3Quc2VydmljZVwiO1xyXG5pbXBvcnQgeyBBdXRoUmVzcG9uc2UgfSBmcm9tICdtc2FsJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE1zYWxJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dGg6IE1zYWxTZXJ2aWNlICwgIHByaXZhdGUgYnJvYWRjYXN0U2VydmljZTogQnJvYWRjYXN0U2VydmljZSkge31cclxuXHJcbiAgICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcclxuICAgICAgICBjb25zdCBzY29wZXMgPSB0aGlzLmF1dGguZ2V0U2NvcGVzRm9yRW5kcG9pbnQocmVxLnVybCk7XHJcbiAgICAgICAgdGhpcy5hdXRoLmdldExvZ2dlcigpLnZlcmJvc2UoJ1VybDogJyArIHJlcS51cmwgKyAnIG1hcHMgdG8gc2NvcGVzOiAnICsgc2NvcGVzKTtcclxuXHJcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIHNjb3BlcyBzZXQgZm9yIHRoaXMgcmVxdWVzdCwgZG8gbm90aGluZy5cclxuICAgICAgICBpZiAoIXNjb3Blcykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBhY2Nlc3NUb2tlbjogc3RyaW5nO1xyXG5cclxuICAgICAgICAvLyBBY3F1aXJlIGEgdG9rZW4gZm9yIHRoaXMgcmVxdWVzdCwgYW5kIGF0dGFjaCBhcyBwcm9wZXIgYXV0aCBoZWFkZXIuXHJcbiAgICAgICAgcmV0dXJuIGZyb20oXHJcbiAgICAgICAgICAgIHRoaXMuYXV0aC5hY3F1aXJlVG9rZW5TaWxlbnQoeyBzY29wZXMgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZTogQXV0aFJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW4gPSByZXNwb25zZS5hY2Nlc3NUb2tlbjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdXRoSGVhZGVyID0gYEJlYXJlciAke3Jlc3BvbnNlLmFjY2Vzc1Rva2VufWA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcS5jbG9uZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGF1dGhIZWFkZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICBtZXJnZU1hcChuZXh0UmVxID0+IG5leHQuaGFuZGxlKG5leHRSZXEpKSxcclxuICAgICAgICAgICAgdGFwKFxyXG4gICAgICAgICAgICAgICAgZXZlbnQgPT4ge30sXHJcbiAgICAgICAgICAgICAgICBlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSAmJiBlcnIuc3RhdHVzID09PSA0MDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRoLmNsZWFyQ2FjaGVGb3JTY29wZShhY2Nlc3NUb2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnJvYWRjYXN0U2VydmljZS5icm9hZGNhc3QoJ21zYWw6bm90QXV0aG9yaXplZCcsIGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==