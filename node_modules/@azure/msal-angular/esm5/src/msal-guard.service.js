import { __decorate, __param } from "tslib";
import { Inject, Injectable } from "@angular/core";
import { ActivatedRoute, ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, } from "@angular/router";
import { MsalService } from "./msal.service";
import { Location, PlatformLocation } from "@angular/common";
import { BroadcastService } from "./broadcast.service";
import { MSAL_CONFIG, MSAL_CONFIG_ANGULAR } from "./constants";
import { UrlUtils } from "msal/lib-commonjs/utils/UrlUtils";
import { WindowUtils } from "msal/lib-commonjs/utils/WindowUtils";
var MsalGuard = /** @class */ (function () {
    function MsalGuard(msalConfig, msalAngularConfig, authService, router, activatedRoute, location, platformLocation, broadcastService) {
        this.msalConfig = msalConfig;
        this.msalAngularConfig = msalAngularConfig;
        this.authService = authService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.location = location;
        this.platformLocation = platformLocation;
        this.broadcastService = broadcastService;
    }
    MsalGuard.prototype.canActivate = function (route, state) {
        var _this = this;
        this.authService.getLogger().verbose("location change event from old url to new url");
        // If a page with MSAL Guard is set as the redirect for acquireTokenSilent,
        // short-circuit to prevent redirecting or popups.
        if (UrlUtils.urlContainsHash(window.location.hash) && WindowUtils.isInIframe()) {
            this.authService.getLogger().warning("redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.");
            return false;
        }
        if (!this.authService.getAccount()) {
            if (this.msalAngularConfig.popUp) {
                return this.authService.loginPopup({
                    scopes: this.msalAngularConfig.consentScopes,
                    extraQueryParameters: this.msalAngularConfig.extraQueryParameters
                })
                    .then(function () { return true; })
                    .catch(function () { return false; });
            }
            var routePath = "" + window.location.origin + state.url;
            this.authService.loginRedirect({
                redirectStartPage: routePath,
                scopes: this.msalAngularConfig.consentScopes,
                extraQueryParameters: this.msalAngularConfig.extraQueryParameters
            });
        }
        else {
            return this.authService.acquireTokenSilent({
                scopes: [this.msalConfig.auth.clientId]
            })
                .then(function (result) {
                _this.broadcastService.broadcast("msal:loginSuccess", result);
                return true;
            })
                .catch(function (error) {
                _this.broadcastService.broadcast("msal:loginFailure", error);
                return false;
            });
        }
    };
    MsalGuard.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MSAL_CONFIG,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MSAL_CONFIG_ANGULAR,] }] },
        { type: MsalService },
        { type: Router },
        { type: ActivatedRoute },
        { type: Location },
        { type: PlatformLocation },
        { type: BroadcastService }
    ]; };
    MsalGuard = __decorate([
        Injectable(),
        __param(0, Inject(MSAL_CONFIG)),
        __param(1, Inject(MSAL_CONFIG_ANGULAR))
    ], MsalGuard);
    return MsalGuard;
}());
export { MsalGuard };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXNhbC1ndWFyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGF6dXJlL21zYWwtYW5ndWxhci8iLCJzb3VyY2VzIjpbInNyYy9tc2FsLWd1YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFDSCxjQUFjLEVBQ2Qsc0JBQXNCLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFDM0MsbUJBQW1CLEdBQ3RCLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUd2RCxPQUFPLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUM1RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFHbEU7SUFFSSxtQkFDaUMsVUFBeUIsRUFDakIsaUJBQTJDLEVBQ3hFLFdBQXdCLEVBQ3hCLE1BQWMsRUFDZCxjQUE4QixFQUM5QixRQUFrQixFQUNsQixnQkFBa0MsRUFDbEMsZ0JBQWtDO1FBUGIsZUFBVSxHQUFWLFVBQVUsQ0FBZTtRQUNqQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQTBCO1FBQ3hFLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFDM0MsQ0FBQztJQUVKLCtCQUFXLEdBQVgsVUFBWSxLQUE2QixFQUFFLEtBQTBCO1FBQXJFLGlCQXlDQztRQXhDRyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1FBRXRGLDJFQUEyRTtRQUMzRSxrREFBa0Q7UUFDbEQsSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQzVFLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDLDJIQUEySCxDQUFDLENBQUM7WUFDbEssT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNoQyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUU7Z0JBQzlCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUM7b0JBQy9CLE1BQU0sRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYTtvQkFDNUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLG9CQUFvQjtpQkFDcEUsQ0FBQztxQkFDRyxJQUFJLENBQUMsY0FBTSxPQUFBLElBQUksRUFBSixDQUFJLENBQUM7cUJBQ2hCLEtBQUssQ0FBQyxjQUFNLE9BQUEsS0FBSyxFQUFMLENBQUssQ0FBQyxDQUFDO2FBQzNCO1lBRUQsSUFBTSxTQUFTLEdBQUcsS0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBSyxDQUFDO1lBRTFELElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO2dCQUMzQixpQkFBaUIsRUFBRSxTQUFTO2dCQUM1QixNQUFNLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWE7Z0JBQzVDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxvQkFBb0I7YUFDcEUsQ0FBQyxDQUFDO1NBQ047YUFBTTtZQUNILE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztnQkFDdkMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2FBQzFDLENBQUM7aUJBQ0csSUFBSSxDQUFDLFVBQUMsTUFBb0I7Z0JBQ3ZCLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUcsTUFBTSxDQUFDLENBQUM7Z0JBQzlELE9BQU8sSUFBSSxDQUFDO1lBQ2hCLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsVUFBQyxLQUFnQjtnQkFDcEIsS0FBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDNUQsT0FBTyxLQUFLLENBQUM7WUFDakIsQ0FBQyxDQUFDLENBQUM7U0FDVjtJQUVMLENBQUM7O2dEQW5ESSxNQUFNLFNBQUMsV0FBVztnREFDbEIsTUFBTSxTQUFDLG1CQUFtQjtnQkFDTixXQUFXO2dCQUNoQixNQUFNO2dCQUNFLGNBQWM7Z0JBQ3BCLFFBQVE7Z0JBQ0EsZ0JBQWdCO2dCQUNoQixnQkFBZ0I7O0lBVnJDLFNBQVM7UUFEckIsVUFBVSxFQUFFO1FBSUosV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDbkIsV0FBQSxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtPQUp2QixTQUFTLENBd0RyQjtJQUFELGdCQUFDO0NBQUEsQUF4REQsSUF3REM7U0F4RFksU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7XHJcbiAgICBBY3RpdmF0ZWRSb3V0ZSxcclxuICAgIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENhbkFjdGl2YXRlLCBSb3V0ZXIsXHJcbiAgICBSb3V0ZXJTdGF0ZVNuYXBzaG90LFxyXG59IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgTXNhbFNlcnZpY2UgfSBmcm9tIFwiLi9tc2FsLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgTG9jYXRpb24sIFBsYXRmb3JtTG9jYXRpb24gfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XHJcbmltcG9ydCB7IEJyb2FkY2FzdFNlcnZpY2UgfSBmcm9tIFwiLi9icm9hZGNhc3Quc2VydmljZVwiO1xyXG5pbXBvcnQgeyBDb25maWd1cmF0aW9uLCBBdXRoUmVzcG9uc2UsIEF1dGhFcnJvciB9IGZyb20gXCJtc2FsXCI7XHJcbmltcG9ydCB7IE1zYWxBbmd1bGFyQ29uZmlndXJhdGlvbiB9IGZyb20gXCIuL21zYWwtYW5ndWxhci5jb25maWd1cmF0aW9uXCI7XHJcbmltcG9ydCB7IE1TQUxfQ09ORklHLCBNU0FMX0NPTkZJR19BTkdVTEFSIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IFVybFV0aWxzIH0gZnJvbSBcIm1zYWwvbGliLWNvbW1vbmpzL3V0aWxzL1VybFV0aWxzXCI7XHJcbmltcG9ydCB7IFdpbmRvd1V0aWxzIH0gZnJvbSBcIm1zYWwvbGliLWNvbW1vbmpzL3V0aWxzL1dpbmRvd1V0aWxzXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBNc2FsR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQEluamVjdChNU0FMX0NPTkZJRykgcHJpdmF0ZSBtc2FsQ29uZmlnOiBDb25maWd1cmF0aW9uLFxyXG4gICAgICAgIEBJbmplY3QoTVNBTF9DT05GSUdfQU5HVUxBUikgcHJpdmF0ZSBtc2FsQW5ndWxhckNvbmZpZzogTXNhbEFuZ3VsYXJDb25maWd1cmF0aW9uLFxyXG4gICAgICAgIHByaXZhdGUgYXV0aFNlcnZpY2U6IE1zYWxTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXHJcbiAgICAgICAgcHJpdmF0ZSBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsXHJcbiAgICAgICAgcHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24sXHJcbiAgICAgICAgcHJpdmF0ZSBwbGF0Zm9ybUxvY2F0aW9uOiBQbGF0Zm9ybUxvY2F0aW9uLFxyXG4gICAgICAgIHByaXZhdGUgYnJvYWRjYXN0U2VydmljZTogQnJvYWRjYXN0U2VydmljZVxyXG4gICAgKSB7fVxyXG5cclxuICAgIGNhbkFjdGl2YXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICB0aGlzLmF1dGhTZXJ2aWNlLmdldExvZ2dlcigpLnZlcmJvc2UoXCJsb2NhdGlvbiBjaGFuZ2UgZXZlbnQgZnJvbSBvbGQgdXJsIHRvIG5ldyB1cmxcIik7XHJcblxyXG4gICAgICAgIC8vIElmIGEgcGFnZSB3aXRoIE1TQUwgR3VhcmQgaXMgc2V0IGFzIHRoZSByZWRpcmVjdCBmb3IgYWNxdWlyZVRva2VuU2lsZW50LFxyXG4gICAgICAgIC8vIHNob3J0LWNpcmN1aXQgdG8gcHJldmVudCByZWRpcmVjdGluZyBvciBwb3B1cHMuXHJcbiAgICAgICAgaWYgKFVybFV0aWxzLnVybENvbnRhaW5zSGFzaCh3aW5kb3cubG9jYXRpb24uaGFzaCkgJiYgV2luZG93VXRpbHMuaXNJbklmcmFtZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0aFNlcnZpY2UuZ2V0TG9nZ2VyKCkud2FybmluZyhcInJlZGlyZWN0VXJpIHNldCB0byBwYWdlIHdpdGggTVNBTCBHdWFyZC4gSXQgaXMgcmVjb21tZW5kZWQgdG8gbm90IHNldCByZWRpcmVjdFVyaSB0byBhIHBhZ2UgdGhhdCByZXF1aXJlcyBhdXRoZW50aWNhdGlvbi5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5hdXRoU2VydmljZS5nZXRBY2NvdW50KCkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubXNhbEFuZ3VsYXJDb25maWcucG9wVXApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmF1dGhTZXJ2aWNlLmxvZ2luUG9wdXAoe1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlczogdGhpcy5tc2FsQW5ndWxhckNvbmZpZy5jb25zZW50U2NvcGVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhUXVlcnlQYXJhbWV0ZXJzOiB0aGlzLm1zYWxBbmd1bGFyQ29uZmlnLmV4dHJhUXVlcnlQYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgcm91dGVQYXRoID0gYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0ke3N0YXRlLnVybH1gO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hdXRoU2VydmljZS5sb2dpblJlZGlyZWN0KHtcclxuICAgICAgICAgICAgICAgIHJlZGlyZWN0U3RhcnRQYWdlOiByb3V0ZVBhdGgsXHJcbiAgICAgICAgICAgICAgICBzY29wZXM6IHRoaXMubXNhbEFuZ3VsYXJDb25maWcuY29uc2VudFNjb3BlcyxcclxuICAgICAgICAgICAgICAgIGV4dHJhUXVlcnlQYXJhbWV0ZXJzOiB0aGlzLm1zYWxBbmd1bGFyQ29uZmlnLmV4dHJhUXVlcnlQYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF1dGhTZXJ2aWNlLmFjcXVpcmVUb2tlblNpbGVudCh7XHJcbiAgICAgICAgICAgICAgICBzY29wZXM6IFt0aGlzLm1zYWxDb25maWcuYXV0aC5jbGllbnRJZF1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHQ6IEF1dGhSZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnJvYWRjYXN0U2VydmljZS5icm9hZGNhc3QoXCJtc2FsOmxvZ2luU3VjY2Vzc1wiLCAgcmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yOiBBdXRoRXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJyb2FkY2FzdFNlcnZpY2UuYnJvYWRjYXN0KFwibXNhbDpsb2dpbkZhaWx1cmVcIiwgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==