{"version":3,"file":"documents.js","sourceRoot":"","sources":["../../../../../src/generated/data/operations/documents.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/documentsMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SearchClientContext } from \"../searchClientContext\";\n\n/** Class representing a Documents. */\nexport class Documents {\n  private readonly client: SearchClientContext;\n\n  /**\n   * Create a Documents.\n   * @param {SearchClientContext} client Reference to the service client.\n   */\n  constructor(client: SearchClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Queries the number of documents in the index.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DocumentsCountResponse>\n   */\n  count(options?: coreHttp.RequestOptionsBase): Promise<Models.DocumentsCountResponse>;\n  /**\n   * @param callback The callback\n   */\n  count(callback: coreHttp.ServiceCallback<number>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  count(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;\n  count(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.DocumentsCountResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      countOperationSpec,\n      callback) as Promise<Models.DocumentsCountResponse>;\n  }\n\n  /**\n   * Searches for documents in the index.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DocumentsSearchGetResponse>\n   */\n  searchGet(options?: Models.DocumentsSearchGetOptionalParams): Promise<Models.DocumentsSearchGetResponse>;\n  /**\n   * @param callback The callback\n   */\n  searchGet(callback: coreHttp.ServiceCallback<Models.SearchDocumentsResult>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  searchGet(options: Models.DocumentsSearchGetOptionalParams, callback: coreHttp.ServiceCallback<Models.SearchDocumentsResult>): void;\n  searchGet(options?: Models.DocumentsSearchGetOptionalParams | coreHttp.ServiceCallback<Models.SearchDocumentsResult>, callback?: coreHttp.ServiceCallback<Models.SearchDocumentsResult>): Promise<Models.DocumentsSearchGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      searchGetOperationSpec,\n      callback) as Promise<Models.DocumentsSearchGetResponse>;\n  }\n\n  /**\n   * Searches for documents in the index.\n   * @param searchRequest The definition of the Search request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DocumentsSearchPostResponse>\n   */\n  searchPost(searchRequest: Models.SearchRequest, options?: coreHttp.RequestOptionsBase): Promise<Models.DocumentsSearchPostResponse>;\n  /**\n   * @param searchRequest The definition of the Search request.\n   * @param callback The callback\n   */\n  searchPost(searchRequest: Models.SearchRequest, callback: coreHttp.ServiceCallback<Models.SearchDocumentsResult>): void;\n  /**\n   * @param searchRequest The definition of the Search request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  searchPost(searchRequest: Models.SearchRequest, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SearchDocumentsResult>): void;\n  searchPost(searchRequest: Models.SearchRequest, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SearchDocumentsResult>, callback?: coreHttp.ServiceCallback<Models.SearchDocumentsResult>): Promise<Models.DocumentsSearchPostResponse> {\n    return this.client.sendOperationRequest(\n      {\n        searchRequest,\n        options\n      },\n      searchPostOperationSpec,\n      callback) as Promise<Models.DocumentsSearchPostResponse>;\n  }\n\n  /**\n   * Retrieves a document from the index.\n   * @param key The key of the document to retrieve.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DocumentsGetResponse>\n   */\n  get(key: string, options?: Models.DocumentsGetOptionalParams): Promise<Models.DocumentsGetResponse>;\n  /**\n   * @param key The key of the document to retrieve.\n   * @param callback The callback\n   */\n  get(key: string, callback: coreHttp.ServiceCallback<any>): void;\n  /**\n   * @param key The key of the document to retrieve.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(key: string, options: Models.DocumentsGetOptionalParams, callback: coreHttp.ServiceCallback<any>): void;\n  get(key: string, options?: Models.DocumentsGetOptionalParams | coreHttp.ServiceCallback<any>, callback?: coreHttp.ServiceCallback<any>): Promise<Models.DocumentsGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        key,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.DocumentsGetResponse>;\n  }\n\n  /**\n   * Suggests documents in the index that match the given partial query text.\n   * @param searchText The search text to use to suggest documents. Must be at least 1 character, and\n   * no more than 100 characters.\n   * @param suggesterName The name of the suggester as specified in the suggesters collection that's\n   * part of the index definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DocumentsSuggestGetResponse>\n   */\n  suggestGet(searchText: string, suggesterName: string, options?: Models.DocumentsSuggestGetOptionalParams): Promise<Models.DocumentsSuggestGetResponse>;\n  /**\n   * @param searchText The search text to use to suggest documents. Must be at least 1 character, and\n   * no more than 100 characters.\n   * @param suggesterName The name of the suggester as specified in the suggesters collection that's\n   * part of the index definition.\n   * @param callback The callback\n   */\n  suggestGet(searchText: string, suggesterName: string, callback: coreHttp.ServiceCallback<Models.SuggestDocumentsResult>): void;\n  /**\n   * @param searchText The search text to use to suggest documents. Must be at least 1 character, and\n   * no more than 100 characters.\n   * @param suggesterName The name of the suggester as specified in the suggesters collection that's\n   * part of the index definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  suggestGet(searchText: string, suggesterName: string, options: Models.DocumentsSuggestGetOptionalParams, callback: coreHttp.ServiceCallback<Models.SuggestDocumentsResult>): void;\n  suggestGet(searchText: string, suggesterName: string, options?: Models.DocumentsSuggestGetOptionalParams | coreHttp.ServiceCallback<Models.SuggestDocumentsResult>, callback?: coreHttp.ServiceCallback<Models.SuggestDocumentsResult>): Promise<Models.DocumentsSuggestGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        searchText,\n        suggesterName,\n        options\n      },\n      suggestGetOperationSpec,\n      callback) as Promise<Models.DocumentsSuggestGetResponse>;\n  }\n\n  /**\n   * Suggests documents in the index that match the given partial query text.\n   * @param suggestRequest The Suggest request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DocumentsSuggestPostResponse>\n   */\n  suggestPost(suggestRequest: Models.SuggestRequest, options?: coreHttp.RequestOptionsBase): Promise<Models.DocumentsSuggestPostResponse>;\n  /**\n   * @param suggestRequest The Suggest request.\n   * @param callback The callback\n   */\n  suggestPost(suggestRequest: Models.SuggestRequest, callback: coreHttp.ServiceCallback<Models.SuggestDocumentsResult>): void;\n  /**\n   * @param suggestRequest The Suggest request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  suggestPost(suggestRequest: Models.SuggestRequest, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SuggestDocumentsResult>): void;\n  suggestPost(suggestRequest: Models.SuggestRequest, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SuggestDocumentsResult>, callback?: coreHttp.ServiceCallback<Models.SuggestDocumentsResult>): Promise<Models.DocumentsSuggestPostResponse> {\n    return this.client.sendOperationRequest(\n      {\n        suggestRequest,\n        options\n      },\n      suggestPostOperationSpec,\n      callback) as Promise<Models.DocumentsSuggestPostResponse>;\n  }\n\n  /**\n   * Sends a batch of document write actions to the index.\n   * @param batch The batch of index actions.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DocumentsIndexResponse>\n   */\n  index(batch: Models.IndexBatch, options?: coreHttp.RequestOptionsBase): Promise<Models.DocumentsIndexResponse>;\n  /**\n   * @param batch The batch of index actions.\n   * @param callback The callback\n   */\n  index(batch: Models.IndexBatch, callback: coreHttp.ServiceCallback<Models.IndexDocumentsResult>): void;\n  /**\n   * @param batch The batch of index actions.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  index(batch: Models.IndexBatch, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.IndexDocumentsResult>): void;\n  index(batch: Models.IndexBatch, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.IndexDocumentsResult>, callback?: coreHttp.ServiceCallback<Models.IndexDocumentsResult>): Promise<Models.DocumentsIndexResponse> {\n    return this.client.sendOperationRequest(\n      {\n        batch,\n        options\n      },\n      indexOperationSpec,\n      callback) as Promise<Models.DocumentsIndexResponse>;\n  }\n\n  /**\n   * Autocompletes incomplete query terms based on input text and matching terms in the index.\n   * @param searchText The incomplete term which should be auto-completed.\n   * @param suggesterName The name of the suggester as specified in the suggesters collection that's\n   * part of the index definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DocumentsAutocompleteGetResponse>\n   */\n  autocompleteGet(searchText: string, suggesterName: string, options?: Models.DocumentsAutocompleteGetOptionalParams): Promise<Models.DocumentsAutocompleteGetResponse>;\n  /**\n   * @param searchText The incomplete term which should be auto-completed.\n   * @param suggesterName The name of the suggester as specified in the suggesters collection that's\n   * part of the index definition.\n   * @param callback The callback\n   */\n  autocompleteGet(searchText: string, suggesterName: string, callback: coreHttp.ServiceCallback<Models.AutocompleteResult>): void;\n  /**\n   * @param searchText The incomplete term which should be auto-completed.\n   * @param suggesterName The name of the suggester as specified in the suggesters collection that's\n   * part of the index definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  autocompleteGet(searchText: string, suggesterName: string, options: Models.DocumentsAutocompleteGetOptionalParams, callback: coreHttp.ServiceCallback<Models.AutocompleteResult>): void;\n  autocompleteGet(searchText: string, suggesterName: string, options?: Models.DocumentsAutocompleteGetOptionalParams | coreHttp.ServiceCallback<Models.AutocompleteResult>, callback?: coreHttp.ServiceCallback<Models.AutocompleteResult>): Promise<Models.DocumentsAutocompleteGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        searchText,\n        suggesterName,\n        options\n      },\n      autocompleteGetOperationSpec,\n      callback) as Promise<Models.DocumentsAutocompleteGetResponse>;\n  }\n\n  /**\n   * Autocompletes incomplete query terms based on input text and matching terms in the index.\n   * @param autocompleteRequest The definition of the Autocomplete request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DocumentsAutocompletePostResponse>\n   */\n  autocompletePost(autocompleteRequest: Models.AutocompleteRequest, options?: coreHttp.RequestOptionsBase): Promise<Models.DocumentsAutocompletePostResponse>;\n  /**\n   * @param autocompleteRequest The definition of the Autocomplete request.\n   * @param callback The callback\n   */\n  autocompletePost(autocompleteRequest: Models.AutocompleteRequest, callback: coreHttp.ServiceCallback<Models.AutocompleteResult>): void;\n  /**\n   * @param autocompleteRequest The definition of the Autocomplete request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  autocompletePost(autocompleteRequest: Models.AutocompleteRequest, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.AutocompleteResult>): void;\n  autocompletePost(autocompleteRequest: Models.AutocompleteRequest, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.AutocompleteResult>, callback?: coreHttp.ServiceCallback<Models.AutocompleteResult>): Promise<Models.DocumentsAutocompletePostResponse> {\n    return this.client.sendOperationRequest(\n      {\n        autocompleteRequest,\n        options\n      },\n      autocompletePostOperationSpec,\n      callback) as Promise<Models.DocumentsAutocompletePostResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers);\nconst countOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"docs/$count\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst searchGetOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"docs\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName\n  ],\n  queryParameters: [\n    Parameters.searchText0,\n    Parameters.apiVersion,\n    Parameters.includeTotalResultCount,\n    Parameters.facets,\n    Parameters.filter0,\n    Parameters.highlightFields,\n    Parameters.highlightPostTag0,\n    Parameters.highlightPreTag0,\n    Parameters.minimumCoverage0,\n    Parameters.orderBy0,\n    Parameters.queryType,\n    Parameters.scoringParameters,\n    Parameters.scoringProfile,\n    Parameters.searchFields0,\n    Parameters.searchMode,\n    Parameters.select0,\n    Parameters.skip,\n    Parameters.top0\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst searchPostOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"docs/search.post.search\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  requestBody: {\n    parameterPath: \"searchRequest\",\n    mapper: {\n      ...Mappers.SearchRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"docs('{key}')\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName,\n    Parameters.key\n  ],\n  queryParameters: [\n    Parameters.selectedFields,\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Object\"\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst suggestGetOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"docs/search.suggest\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName\n  ],\n  queryParameters: [\n    Parameters.searchText1,\n    Parameters.suggesterName,\n    Parameters.apiVersion,\n    Parameters.filter1,\n    Parameters.useFuzzyMatching0,\n    Parameters.highlightPostTag1,\n    Parameters.highlightPreTag1,\n    Parameters.minimumCoverage1,\n    Parameters.orderBy1,\n    Parameters.searchFields1,\n    Parameters.select1,\n    Parameters.top1\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SuggestDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst suggestPostOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"docs/search.post.suggest\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  requestBody: {\n    parameterPath: \"suggestRequest\",\n    mapper: {\n      ...Mappers.SuggestRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SuggestDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst indexOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"docs/search.index\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  requestBody: {\n    parameterPath: \"batch\",\n    mapper: {\n      ...Mappers.IndexBatch,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.IndexDocumentsResult\n    },\n    207: {\n      bodyMapper: Mappers.IndexDocumentsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst autocompleteGetOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"docs/search.autocomplete\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName\n  ],\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.searchText1,\n    Parameters.suggesterName,\n    Parameters.autocompleteMode,\n    Parameters.filter2,\n    Parameters.useFuzzyMatching1,\n    Parameters.highlightPostTag2,\n    Parameters.highlightPreTag2,\n    Parameters.minimumCoverage2,\n    Parameters.searchFields2,\n    Parameters.top2\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.AutocompleteResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst autocompletePostOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"docs/search.post.autocomplete\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  requestBody: {\n    parameterPath: \"autocompleteRequest\",\n    mapper: {\n      ...Mappers.AutocompleteRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.AutocompleteResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n"]}