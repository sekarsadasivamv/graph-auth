/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/dataSourcesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a DataSources. */
export class DataSources {
    /**
     * Create a DataSources.
     * @param {SearchServiceClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    createOrUpdate(dataSourceName, dataSource, options, callback) {
        return this.client.sendOperationRequest({
            dataSourceName,
            dataSource,
            options
        }, createOrUpdateOperationSpec, callback);
    }
    deleteMethod(dataSourceName, options, callback) {
        return this.client.sendOperationRequest({
            dataSourceName,
            options
        }, deleteMethodOperationSpec, callback);
    }
    get(dataSourceName, options, callback) {
        return this.client.sendOperationRequest({
            dataSourceName,
            options
        }, getOperationSpec, callback);
    }
    list(options, callback) {
        return this.client.sendOperationRequest({
            options
        }, listOperationSpec, callback);
    }
    create(dataSource, options, callback) {
        return this.client.sendOperationRequest({
            dataSource,
            options
        }, createOperationSpec, callback);
    }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "datasources('{dataSourceName}')",
    urlParameters: [
        Parameters.endpoint,
        Parameters.dataSourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.prefer
    ],
    requestBody: {
        parameterPath: "dataSource",
        mapper: Object.assign(Object.assign({}, Mappers.SearchIndexerDataSource), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SearchIndexerDataSource
        },
        201: {
            bodyMapper: Mappers.SearchIndexerDataSource
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
const deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "datasources('{dataSourceName}')",
    urlParameters: [
        Parameters.endpoint,
        Parameters.dataSourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
const getOperationSpec = {
    httpMethod: "GET",
    path: "datasources('{dataSourceName}')",
    urlParameters: [
        Parameters.endpoint,
        Parameters.dataSourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SearchIndexerDataSource
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
const listOperationSpec = {
    httpMethod: "GET",
    path: "datasources",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.select,
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ListDataSourcesResult
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
const createOperationSpec = {
    httpMethod: "POST",
    path: "datasources",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    requestBody: {
        parameterPath: "dataSource",
        mapper: Object.assign(Object.assign({}, Mappers.SearchIndexerDataSource), { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.SearchIndexerDataSource
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    serializer
};
//# sourceMappingURL=dataSources.js.map