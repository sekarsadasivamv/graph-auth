{"version":3,"file":"dataSources.js","sourceRoot":"","sources":["../../../../../src/generated/service/operations/dataSources.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/dataSourcesMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SearchServiceClientContext } from \"../searchServiceClientContext\";\n\n/** Class representing a DataSources. */\nexport class DataSources {\n  private readonly client: SearchServiceClientContext;\n\n  /**\n   * Create a DataSources.\n   * @param {SearchServiceClientContext} client Reference to the service client.\n   */\n  constructor(client: SearchServiceClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new datasource or updates a datasource if it already exists.\n   * @param dataSourceName The name of the datasource to create or update.\n   * @param dataSource The definition of the datasource to create or update.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DataSourcesCreateOrUpdateResponse>\n   */\n  createOrUpdate(dataSourceName: string, dataSource: Models.SearchIndexerDataSource, options?: Models.DataSourcesCreateOrUpdateOptionalParams): Promise<Models.DataSourcesCreateOrUpdateResponse>;\n  /**\n   * @param dataSourceName The name of the datasource to create or update.\n   * @param dataSource The definition of the datasource to create or update.\n   * @param callback The callback\n   */\n  createOrUpdate(dataSourceName: string, dataSource: Models.SearchIndexerDataSource, callback: coreHttp.ServiceCallback<Models.SearchIndexerDataSource>): void;\n  /**\n   * @param dataSourceName The name of the datasource to create or update.\n   * @param dataSource The definition of the datasource to create or update.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createOrUpdate(dataSourceName: string, dataSource: Models.SearchIndexerDataSource, options: Models.DataSourcesCreateOrUpdateOptionalParams, callback: coreHttp.ServiceCallback<Models.SearchIndexerDataSource>): void;\n  createOrUpdate(dataSourceName: string, dataSource: Models.SearchIndexerDataSource, options?: Models.DataSourcesCreateOrUpdateOptionalParams | coreHttp.ServiceCallback<Models.SearchIndexerDataSource>, callback?: coreHttp.ServiceCallback<Models.SearchIndexerDataSource>): Promise<Models.DataSourcesCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        dataSourceName,\n        dataSource,\n        options\n      },\n      createOrUpdateOperationSpec,\n      callback) as Promise<Models.DataSourcesCreateOrUpdateResponse>;\n  }\n\n  /**\n   * Deletes a datasource.\n   * @param dataSourceName The name of the datasource to delete.\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  deleteMethod(dataSourceName: string, options?: Models.DataSourcesDeleteMethodOptionalParams): Promise<coreHttp.RestResponse>;\n  /**\n   * @param dataSourceName The name of the datasource to delete.\n   * @param callback The callback\n   */\n  deleteMethod(dataSourceName: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param dataSourceName The name of the datasource to delete.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(dataSourceName: string, options: Models.DataSourcesDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  deleteMethod(dataSourceName: string, options?: Models.DataSourcesDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        dataSourceName,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieves a datasource definition.\n   * @param dataSourceName The name of the datasource to retrieve.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DataSourcesGetResponse>\n   */\n  get(dataSourceName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DataSourcesGetResponse>;\n  /**\n   * @param dataSourceName The name of the datasource to retrieve.\n   * @param callback The callback\n   */\n  get(dataSourceName: string, callback: coreHttp.ServiceCallback<Models.SearchIndexerDataSource>): void;\n  /**\n   * @param dataSourceName The name of the datasource to retrieve.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(dataSourceName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SearchIndexerDataSource>): void;\n  get(dataSourceName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SearchIndexerDataSource>, callback?: coreHttp.ServiceCallback<Models.SearchIndexerDataSource>): Promise<Models.DataSourcesGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        dataSourceName,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.DataSourcesGetResponse>;\n  }\n\n  /**\n   * Lists all datasources available for a search service.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DataSourcesListResponse>\n   */\n  list(options?: Models.DataSourcesListOptionalParams): Promise<Models.DataSourcesListResponse>;\n  /**\n   * @param callback The callback\n   */\n  list(callback: coreHttp.ServiceCallback<Models.ListDataSourcesResult>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  list(options: Models.DataSourcesListOptionalParams, callback: coreHttp.ServiceCallback<Models.ListDataSourcesResult>): void;\n  list(options?: Models.DataSourcesListOptionalParams | coreHttp.ServiceCallback<Models.ListDataSourcesResult>, callback?: coreHttp.ServiceCallback<Models.ListDataSourcesResult>): Promise<Models.DataSourcesListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listOperationSpec,\n      callback) as Promise<Models.DataSourcesListResponse>;\n  }\n\n  /**\n   * Creates a new datasource.\n   * @param dataSource The definition of the datasource to create.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DataSourcesCreateResponse>\n   */\n  create(dataSource: Models.SearchIndexerDataSource, options?: coreHttp.RequestOptionsBase): Promise<Models.DataSourcesCreateResponse>;\n  /**\n   * @param dataSource The definition of the datasource to create.\n   * @param callback The callback\n   */\n  create(dataSource: Models.SearchIndexerDataSource, callback: coreHttp.ServiceCallback<Models.SearchIndexerDataSource>): void;\n  /**\n   * @param dataSource The definition of the datasource to create.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(dataSource: Models.SearchIndexerDataSource, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SearchIndexerDataSource>): void;\n  create(dataSource: Models.SearchIndexerDataSource, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SearchIndexerDataSource>, callback?: coreHttp.ServiceCallback<Models.SearchIndexerDataSource>): Promise<Models.DataSourcesCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        dataSource,\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.DataSourcesCreateResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers);\nconst createOrUpdateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"datasources('{dataSourceName}')\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.dataSourceName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.prefer\n  ],\n  requestBody: {\n    parameterPath: \"dataSource\",\n    mapper: {\n      ...Mappers.SearchIndexerDataSource,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexerDataSource\n    },\n    201: {\n      bodyMapper: Mappers.SearchIndexerDataSource\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst deleteMethodOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"datasources('{dataSourceName}')\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.dataSourceName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    204: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"datasources('{dataSourceName}')\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.dataSourceName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexerDataSource\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst listOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"datasources\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.select,\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListDataSourcesResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"datasources\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  requestBody: {\n    parameterPath: \"dataSource\",\n    mapper: {\n      ...Mappers.SearchIndexerDataSource,\n      required: true\n    }\n  },\n  responses: {\n    201: {\n      bodyMapper: Mappers.SearchIndexerDataSource\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n"]}