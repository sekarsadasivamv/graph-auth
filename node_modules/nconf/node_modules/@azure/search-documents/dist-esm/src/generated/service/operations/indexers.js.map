{"version":3,"file":"indexers.js","sourceRoot":"","sources":["../../../../../src/generated/service/operations/indexers.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/indexersMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SearchServiceClientContext } from \"../searchServiceClientContext\";\n\n/** Class representing a Indexers. */\nexport class Indexers {\n  private readonly client: SearchServiceClientContext;\n\n  /**\n   * Create a Indexers.\n   * @param {SearchServiceClientContext} client Reference to the service client.\n   */\n  constructor(client: SearchServiceClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Resets the change tracking state associated with an indexer.\n   * @param indexerName The name of the indexer to reset.\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  reset(indexerName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;\n  /**\n   * @param indexerName The name of the indexer to reset.\n   * @param callback The callback\n   */\n  reset(indexerName: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param indexerName The name of the indexer to reset.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  reset(indexerName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;\n  reset(indexerName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        indexerName,\n        options\n      },\n      resetOperationSpec,\n      callback);\n  }\n\n  /**\n   * Runs an indexer on-demand.\n   * @param indexerName The name of the indexer to run.\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  run(indexerName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;\n  /**\n   * @param indexerName The name of the indexer to run.\n   * @param callback The callback\n   */\n  run(indexerName: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param indexerName The name of the indexer to run.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  run(indexerName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;\n  run(indexerName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        indexerName,\n        options\n      },\n      runOperationSpec,\n      callback);\n  }\n\n  /**\n   * Creates a new indexer or updates an indexer if it already exists.\n   * @param indexerName The name of the indexer to create or update.\n   * @param indexer The definition of the indexer to create or update.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.IndexersCreateOrUpdateResponse>\n   */\n  createOrUpdate(indexerName: string, indexer: Models.SearchIndexer, options?: Models.IndexersCreateOrUpdateOptionalParams): Promise<Models.IndexersCreateOrUpdateResponse>;\n  /**\n   * @param indexerName The name of the indexer to create or update.\n   * @param indexer The definition of the indexer to create or update.\n   * @param callback The callback\n   */\n  createOrUpdate(indexerName: string, indexer: Models.SearchIndexer, callback: coreHttp.ServiceCallback<Models.SearchIndexer>): void;\n  /**\n   * @param indexerName The name of the indexer to create or update.\n   * @param indexer The definition of the indexer to create or update.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createOrUpdate(indexerName: string, indexer: Models.SearchIndexer, options: Models.IndexersCreateOrUpdateOptionalParams, callback: coreHttp.ServiceCallback<Models.SearchIndexer>): void;\n  createOrUpdate(indexerName: string, indexer: Models.SearchIndexer, options?: Models.IndexersCreateOrUpdateOptionalParams | coreHttp.ServiceCallback<Models.SearchIndexer>, callback?: coreHttp.ServiceCallback<Models.SearchIndexer>): Promise<Models.IndexersCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        indexerName,\n        indexer,\n        options\n      },\n      createOrUpdateOperationSpec,\n      callback) as Promise<Models.IndexersCreateOrUpdateResponse>;\n  }\n\n  /**\n   * Deletes an indexer.\n   * @param indexerName The name of the indexer to delete.\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  deleteMethod(indexerName: string, options?: Models.IndexersDeleteMethodOptionalParams): Promise<coreHttp.RestResponse>;\n  /**\n   * @param indexerName The name of the indexer to delete.\n   * @param callback The callback\n   */\n  deleteMethod(indexerName: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param indexerName The name of the indexer to delete.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(indexerName: string, options: Models.IndexersDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  deleteMethod(indexerName: string, options?: Models.IndexersDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        indexerName,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieves an indexer definition.\n   * @param indexerName The name of the indexer to retrieve.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.IndexersGetResponse>\n   */\n  get(indexerName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.IndexersGetResponse>;\n  /**\n   * @param indexerName The name of the indexer to retrieve.\n   * @param callback The callback\n   */\n  get(indexerName: string, callback: coreHttp.ServiceCallback<Models.SearchIndexer>): void;\n  /**\n   * @param indexerName The name of the indexer to retrieve.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(indexerName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SearchIndexer>): void;\n  get(indexerName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SearchIndexer>, callback?: coreHttp.ServiceCallback<Models.SearchIndexer>): Promise<Models.IndexersGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        indexerName,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.IndexersGetResponse>;\n  }\n\n  /**\n   * Lists all indexers available for a search service.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.IndexersListResponse>\n   */\n  list(options?: Models.IndexersListOptionalParams): Promise<Models.IndexersListResponse>;\n  /**\n   * @param callback The callback\n   */\n  list(callback: coreHttp.ServiceCallback<Models.ListIndexersResult>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  list(options: Models.IndexersListOptionalParams, callback: coreHttp.ServiceCallback<Models.ListIndexersResult>): void;\n  list(options?: Models.IndexersListOptionalParams | coreHttp.ServiceCallback<Models.ListIndexersResult>, callback?: coreHttp.ServiceCallback<Models.ListIndexersResult>): Promise<Models.IndexersListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listOperationSpec,\n      callback) as Promise<Models.IndexersListResponse>;\n  }\n\n  /**\n   * Creates a new indexer.\n   * @param indexer The definition of the indexer to create.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.IndexersCreateResponse>\n   */\n  create(indexer: Models.SearchIndexer, options?: coreHttp.RequestOptionsBase): Promise<Models.IndexersCreateResponse>;\n  /**\n   * @param indexer The definition of the indexer to create.\n   * @param callback The callback\n   */\n  create(indexer: Models.SearchIndexer, callback: coreHttp.ServiceCallback<Models.SearchIndexer>): void;\n  /**\n   * @param indexer The definition of the indexer to create.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(indexer: Models.SearchIndexer, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SearchIndexer>): void;\n  create(indexer: Models.SearchIndexer, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SearchIndexer>, callback?: coreHttp.ServiceCallback<Models.SearchIndexer>): Promise<Models.IndexersCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        indexer,\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.IndexersCreateResponse>;\n  }\n\n  /**\n   * Returns the current status and execution history of an indexer.\n   * @param indexerName The name of the indexer for which to retrieve status.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.IndexersGetStatusResponse>\n   */\n  getStatus(indexerName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.IndexersGetStatusResponse>;\n  /**\n   * @param indexerName The name of the indexer for which to retrieve status.\n   * @param callback The callback\n   */\n  getStatus(indexerName: string, callback: coreHttp.ServiceCallback<Models.SearchIndexerStatus>): void;\n  /**\n   * @param indexerName The name of the indexer for which to retrieve status.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getStatus(indexerName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SearchIndexerStatus>): void;\n  getStatus(indexerName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SearchIndexerStatus>, callback?: coreHttp.ServiceCallback<Models.SearchIndexerStatus>): Promise<Models.IndexersGetStatusResponse> {\n    return this.client.sendOperationRequest(\n      {\n        indexerName,\n        options\n      },\n      getStatusOperationSpec,\n      callback) as Promise<Models.IndexersGetStatusResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers);\nconst resetOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"indexers('{indexerName}')/search.reset\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexerName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst runOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"indexers('{indexerName}')/search.run\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexerName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst createOrUpdateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"indexers('{indexerName}')\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexerName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.prefer\n  ],\n  requestBody: {\n    parameterPath: \"indexer\",\n    mapper: {\n      ...Mappers.SearchIndexer,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexer\n    },\n    201: {\n      bodyMapper: Mappers.SearchIndexer\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst deleteMethodOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"indexers('{indexerName}')\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexerName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    204: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"indexers('{indexerName}')\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexerName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexer\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst listOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"indexers\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.select,\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListIndexersResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"indexers\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  requestBody: {\n    parameterPath: \"indexer\",\n    mapper: {\n      ...Mappers.SearchIndexer,\n      required: true\n    }\n  },\n  responses: {\n    201: {\n      bodyMapper: Mappers.SearchIndexer\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst getStatusOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"indexers('{indexerName}')/search.status\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexerName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexerStatus\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n"]}