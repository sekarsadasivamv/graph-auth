{"version":3,"file":"parameters.js","sourceRoot":"","sources":["../../../../../src/generated/service/models/parameters.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const allowIndexDowntime: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"allowIndexDowntime\"\n  ],\n  mapper: {\n    serializedName: \"allowIndexDowntime\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const apiVersion: coreHttp.OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const dataSourceName: coreHttp.OperationURLParameter = {\n  parameterPath: \"dataSourceName\",\n  mapper: {\n    required: true,\n    serializedName: \"dataSourceName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const endpoint: coreHttp.OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    required: true,\n    serializedName: \"endpoint\",\n    defaultValue: '',\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const ifMatch: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"ifMatch\"\n  ],\n  mapper: {\n    serializedName: \"If-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const ifNoneMatch: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"ifNoneMatch\"\n  ],\n  mapper: {\n    serializedName: \"If-None-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const indexerName: coreHttp.OperationURLParameter = {\n  parameterPath: \"indexerName\",\n  mapper: {\n    required: true,\n    serializedName: \"indexerName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const indexName: coreHttp.OperationURLParameter = {\n  parameterPath: \"indexName\",\n  mapper: {\n    required: true,\n    serializedName: \"indexName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const prefer: coreHttp.OperationParameter = {\n  parameterPath: \"prefer\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"Prefer\",\n    defaultValue: 'return=representation',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const select: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"select\"\n  ],\n  mapper: {\n    serializedName: \"$select\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const skillsetName: coreHttp.OperationURLParameter = {\n  parameterPath: \"skillsetName\",\n  mapper: {\n    required: true,\n    serializedName: \"skillsetName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const synonymMapName: coreHttp.OperationURLParameter = {\n  parameterPath: \"synonymMapName\",\n  mapper: {\n    required: true,\n    serializedName: \"synonymMapName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n"]}