{"version":3,"file":"indexes.js","sourceRoot":"","sources":["../../../../../src/generated/service/operations/indexes.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/indexesMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SearchServiceClientContext } from \"../searchServiceClientContext\";\n\n/** Class representing a Indexes. */\nexport class Indexes {\n  private readonly client: SearchServiceClientContext;\n\n  /**\n   * Create a Indexes.\n   * @param {SearchServiceClientContext} client Reference to the service client.\n   */\n  constructor(client: SearchServiceClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new search index.\n   * @param index The definition of the index to create.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.IndexesCreateResponse>\n   */\n  create(index: Models.SearchIndex, options?: coreHttp.RequestOptionsBase): Promise<Models.IndexesCreateResponse>;\n  /**\n   * @param index The definition of the index to create.\n   * @param callback The callback\n   */\n  create(index: Models.SearchIndex, callback: coreHttp.ServiceCallback<Models.SearchIndex>): void;\n  /**\n   * @param index The definition of the index to create.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(index: Models.SearchIndex, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SearchIndex>): void;\n  create(index: Models.SearchIndex, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SearchIndex>, callback?: coreHttp.ServiceCallback<Models.SearchIndex>): Promise<Models.IndexesCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        index,\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.IndexesCreateResponse>;\n  }\n\n  /**\n   * Lists all indexes available for a search service.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.IndexesListResponse>\n   */\n  list(options?: Models.IndexesListOptionalParams): Promise<Models.IndexesListResponse>;\n  /**\n   * @param callback The callback\n   */\n  list(callback: coreHttp.ServiceCallback<Models.ListIndexesResult>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  list(options: Models.IndexesListOptionalParams, callback: coreHttp.ServiceCallback<Models.ListIndexesResult>): void;\n  list(options?: Models.IndexesListOptionalParams | coreHttp.ServiceCallback<Models.ListIndexesResult>, callback?: coreHttp.ServiceCallback<Models.ListIndexesResult>): Promise<Models.IndexesListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listOperationSpec,\n      callback) as Promise<Models.IndexesListResponse>;\n  }\n\n  /**\n   * Creates a new search index or updates an index if it already exists.\n   * @param indexName The definition of the index to create or update.\n   * @param index The definition of the index to create or update.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.IndexesCreateOrUpdateResponse>\n   */\n  createOrUpdate(indexName: string, index: Models.SearchIndex, options?: Models.IndexesCreateOrUpdateOptionalParams): Promise<Models.IndexesCreateOrUpdateResponse>;\n  /**\n   * @param indexName The definition of the index to create or update.\n   * @param index The definition of the index to create or update.\n   * @param callback The callback\n   */\n  createOrUpdate(indexName: string, index: Models.SearchIndex, callback: coreHttp.ServiceCallback<Models.SearchIndex>): void;\n  /**\n   * @param indexName The definition of the index to create or update.\n   * @param index The definition of the index to create or update.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createOrUpdate(indexName: string, index: Models.SearchIndex, options: Models.IndexesCreateOrUpdateOptionalParams, callback: coreHttp.ServiceCallback<Models.SearchIndex>): void;\n  createOrUpdate(indexName: string, index: Models.SearchIndex, options?: Models.IndexesCreateOrUpdateOptionalParams | coreHttp.ServiceCallback<Models.SearchIndex>, callback?: coreHttp.ServiceCallback<Models.SearchIndex>): Promise<Models.IndexesCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        indexName,\n        index,\n        options\n      },\n      createOrUpdateOperationSpec,\n      callback) as Promise<Models.IndexesCreateOrUpdateResponse>;\n  }\n\n  /**\n   * Deletes a search index and all the documents it contains. This operation is permanent, with no\n   * recovery option. Make sure you have a master copy of your index definition, data ingestion code,\n   * and a backup of the primary data source in case you need to re-build the index.\n   * @param indexName The name of the index to delete.\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  deleteMethod(indexName: string, options?: Models.IndexesDeleteMethodOptionalParams): Promise<coreHttp.RestResponse>;\n  /**\n   * @param indexName The name of the index to delete.\n   * @param callback The callback\n   */\n  deleteMethod(indexName: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param indexName The name of the index to delete.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(indexName: string, options: Models.IndexesDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  deleteMethod(indexName: string, options?: Models.IndexesDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        indexName,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback);\n  }\n\n  /**\n   * Retrieves an index definition.\n   * @param indexName The name of the index to retrieve.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.IndexesGetResponse>\n   */\n  get(indexName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.IndexesGetResponse>;\n  /**\n   * @param indexName The name of the index to retrieve.\n   * @param callback The callback\n   */\n  get(indexName: string, callback: coreHttp.ServiceCallback<Models.SearchIndex>): void;\n  /**\n   * @param indexName The name of the index to retrieve.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(indexName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SearchIndex>): void;\n  get(indexName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SearchIndex>, callback?: coreHttp.ServiceCallback<Models.SearchIndex>): Promise<Models.IndexesGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        indexName,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.IndexesGetResponse>;\n  }\n\n  /**\n   * Returns statistics for the given index, including a document count and storage usage.\n   * @param indexName The name of the index for which to retrieve statistics.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.IndexesGetStatisticsResponse>\n   */\n  getStatistics(indexName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.IndexesGetStatisticsResponse>;\n  /**\n   * @param indexName The name of the index for which to retrieve statistics.\n   * @param callback The callback\n   */\n  getStatistics(indexName: string, callback: coreHttp.ServiceCallback<Models.GetIndexStatisticsResult>): void;\n  /**\n   * @param indexName The name of the index for which to retrieve statistics.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getStatistics(indexName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.GetIndexStatisticsResult>): void;\n  getStatistics(indexName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.GetIndexStatisticsResult>, callback?: coreHttp.ServiceCallback<Models.GetIndexStatisticsResult>): Promise<Models.IndexesGetStatisticsResponse> {\n    return this.client.sendOperationRequest(\n      {\n        indexName,\n        options\n      },\n      getStatisticsOperationSpec,\n      callback) as Promise<Models.IndexesGetStatisticsResponse>;\n  }\n\n  /**\n   * Shows how an analyzer breaks text into tokens.\n   * @param indexName The name of the index for which to test an analyzer.\n   * @param request The text and analyzer or analysis components to test.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.IndexesAnalyzeResponse>\n   */\n  analyze(indexName: string, request: Models.AnalyzeRequest, options?: coreHttp.RequestOptionsBase): Promise<Models.IndexesAnalyzeResponse>;\n  /**\n   * @param indexName The name of the index for which to test an analyzer.\n   * @param request The text and analyzer or analysis components to test.\n   * @param callback The callback\n   */\n  analyze(indexName: string, request: Models.AnalyzeRequest, callback: coreHttp.ServiceCallback<Models.AnalyzeResult>): void;\n  /**\n   * @param indexName The name of the index for which to test an analyzer.\n   * @param request The text and analyzer or analysis components to test.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  analyze(indexName: string, request: Models.AnalyzeRequest, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.AnalyzeResult>): void;\n  analyze(indexName: string, request: Models.AnalyzeRequest, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.AnalyzeResult>, callback?: coreHttp.ServiceCallback<Models.AnalyzeResult>): Promise<Models.IndexesAnalyzeResponse> {\n    return this.client.sendOperationRequest(\n      {\n        indexName,\n        request,\n        options\n      },\n      analyzeOperationSpec,\n      callback) as Promise<Models.IndexesAnalyzeResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers);\nconst createOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"indexes\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  requestBody: {\n    parameterPath: \"index\",\n    mapper: {\n      ...Mappers.SearchIndex,\n      required: true\n    }\n  },\n  responses: {\n    201: {\n      bodyMapper: Mappers.SearchIndex\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst listOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"indexes\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.select,\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListIndexesResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst createOrUpdateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"indexes('{indexName}')\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName\n  ],\n  queryParameters: [\n    Parameters.allowIndexDowntime,\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.prefer\n  ],\n  requestBody: {\n    parameterPath: \"index\",\n    mapper: {\n      ...Mappers.SearchIndex,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndex\n    },\n    201: {\n      bodyMapper: Mappers.SearchIndex\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst deleteMethodOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"indexes('{indexName}')\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    204: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"indexes('{indexName}')\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndex\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst getStatisticsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"indexes('{indexName}')/search.stats\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetIndexStatisticsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n\nconst analyzeOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"indexes('{indexName}')/search.analyze\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.indexName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  requestBody: {\n    parameterPath: \"request\",\n    mapper: {\n      ...Mappers.AnalyzeRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  serializer\n};\n"]}