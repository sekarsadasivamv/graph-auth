{"version":3,"file":"geographyPoint.js","sourceRoot":"","sources":["../../src/geographyPoint.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,MAAM,uBAAuB,GAAG,WAAW,CAAC,CAAC,2BAA2B;AAExE;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,cAAc;IAUjC;;;;;OAKG;IACH,YAAY,QAAgB,EAAE,SAAiB;QAC7C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED;;OAEG;IACI,MAAM;QACX,OAAO;YACL,IAAI,EAAE,OAAO;YACb,WAAW,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC;YAC5C,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,uBAAuB,EAAE,EAAE;SACrE,CAAC;IACJ,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst WorldGeodeticSystem1984 = \"EPSG:4326\"; // See https://epsg.io/4326\n\n/**\n * Represents a geographic point in global coordinates.\n */\nexport default class GeographyPoint {\n  /**\n   * The latitude in decimal.\n   */\n  public latitude: number;\n  /**\n   * The longitude in decimal.\n   */\n  public longitude: number;\n\n  /**\n   * Constructs a new instance of GeographyPoint given\n   * the specified coordinates.\n   * @param latitude latitude value in decimal\n   * @param longitude longitude value in decimal\n   */\n  constructor(latitude: number, longitude: number) {\n    this.latitude = latitude;\n    this.longitude = longitude;\n  }\n\n  /**\n   * Used to serialize to a GeoJSON Point.\n   */\n  public toJSON(): object {\n    return {\n      type: \"Point\",\n      coordinates: [this.longitude, this.latitude],\n      crs: { type: \"name\", properties: { name: WorldGeodeticSystem1984 } }\n    };\n  }\n}\n"]}